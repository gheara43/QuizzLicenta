import 'package:collection/collection.dart';

enum Asd {
  ,
  ,
}

enum BazaDate {
  ,
}

enum Cloud {
  WwogIHsKICAgICJxdWVzdGlvbiI6ICJQcm9kdXN1bCBOb1NRTCBvZmVyaXQgZGUgQVdTIGVzdGU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiRHluYW1vREIiLAogICAgICAiTW9uZ29EQiIsCiAgICAgICJSRFMiLAogICAgICAiQ2xvdWRXYXRjaCIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAwCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiU2VydmljaXVsIEROUyBvZmVyaXQgZGUgQVdTIGVzdGUgZGVudW1pdDoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJDbG91ZCBETlMiLAogICAgICAiQ2xvdWQgRnJvbnQiLAogICAgICAiQ2xvdWQgVHJpYWwiLAogICAgICAiUm91dGU1MyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiSW4gbW9kIGltcGxpY2l0LCBpbnRyLXVuIEFXUyBWUEMgbm91IGNyZWF0LCB0b2F0ZSBpbnN0YW50ZWxlIEVDMiBhdSBhc2lnbmF0ZSAyIGFkcmVzZSBJUC4gQ2FyZSBzdW50IGFjZXN0ZSBhZHJlc2UgSVAIiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiTyBhZHJlc2EgZGUgdGlwIEVsYXN0aWMgSVAgc2kgbyBhZHJlc2EgSVAgcHVibGljYSIsCiAgICAgICJPIGFkcmVzYSBJUCBwcml2YXRhIHNpIG8gYWRyZXNhIElQdjQgcHVibGljYSIsCiAgICAgICJPIGFkcmVzYSBwdWJsaWNhIElQIHNpIG8gYWRyZXNhIHNlY3JldGEgSVAgcGVudHJ1IGEgYXNpZ3VyYSBzZWN1cml0YXRlYSIsCiAgICAgICJBV1MgVlBDIG51IGFzaWduZWF6YSBhZHJlc2UgSVAgbGEgY3JlYXJlIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJDYXJlIHN1bnQgbW9kZWxlbGUgc3RhbmRhcmQgZGUgc2VydmljaWkgZnVuaXphdGUgXCJjbG91ZCBjb21wdXRpbmdcIjoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJJYWFTLCBQYWFTLCBYYWFTIiwKICAgICAgIlNhYVMsIFhhYVMsIE1hYVMiLAogICAgICAiUGFhUywgU2FhUywgTWFhUyIsCiAgICAgICJJYWFzLCBQYWFTLCBTYWFTIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJDYXJlIHN1bnQgbW9kZWxlbGUgZGUgYXJoaXRlY3R1cmEgZGUgXCJjbG91ZCBjb21wdXRpbmdcIjoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJQdWJsaWMgY2xvdWQsIEludGVybmV0IGNsb3VkLCBDb2xlY3RpdmUgY2xvdWQsIFRlYW1zIGNsb3VkIiwKICAgICAgIlB1YmxpYyBjbG91ZCwgQ29tbXVuaXR5IGNsb3VkLCBIeWJyaWQgY2xvdWQsIFByaXZhdGUgY2xvdWQiLAogICAgICAiUHJpdmF0ZSBjbG91ZCwgUHVibGljIGNsb3VkLCBQcml2YXRlIGNsb3VkLCBDb2xlY3RpdiBjbG91ZCIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQ2FyZSBzdW50IHByaWNpcGFsZWxlIHNlcnZpY2lpIGZ1cm5pemF0ZSBkZSBBV1M6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiQW1hem9uIFZQQyIsCiAgICAgICJBbWF6b24gRUMyIiwKICAgICAgIkFXUyBJQU0iLAogICAgICAidG9hdGUiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkF1dGVudGlmaWNhcmVhIG11bHRpZmFjdG9yIHNlIHBvYXRlIGZhY2UgaW4gQVdTIGZvbG9zaW5kOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIlJEUyIsCiAgICAgICJJQU0iLAogICAgICAiRHluYW1vREIiLAogICAgICAiQWNjb3V0IFNldHRpbmdzIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJBV1MgUzMgcmVwcmV6aW50YToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJPYmplY3QgQmFzZSBTdG9yYWdlIiwKICAgICAgIkJsb2NrIEJhc2UgU3RvcmFnZSIsCiAgICAgICJBIERhdGEgV2FyZWhvdXNlIFNvbHV0aW9uIiwKICAgICAgIlN1aXRhYmxlIGZvciBEYXRhIEFyY2hpdmFsIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWVjYXJlIHV0aWxpemF0b3IgY3JlYXQgaW4gQVdTIElBTSBhcmUgaW1wbGljaXQ6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiRnVsbCBQZXJtaXNzaW9uIiwKICAgICAgIlBhcnRpYWwgUGVybWlzc2lvbnMiLAogICAgICAiTm8gUGVybWlzc2lvbnMiLAogICAgICAiRGVkaWNhdGVkIFBlcm1pc3Npb25zIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJJbiBBV1MgUzMgZHVyYWJpbGl0YXRlYSBmaXNpZXJlbG9yIGVzdGUgZGU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiOTksOTkgJSIsCiAgICAgICI5OSw5OTk5OTk5OTkgJSIsCiAgICAgICIxMDAgJSIsCiAgICAgICI5OSAlIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJTZXJ2aWNpdWwgZGUgQ2xvdWRGb3JtYXRpb24gcGVybWl0ZToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJTdG9wLCBUZXJtaW5hdGUsIFJlYm9vdCBzYXUgUmVjb3ZlciBhIHVuZWkgaW5zdGFudGUgRUMyIiwKICAgICAgIkxhbnNhLCBjb25maWd1cmEgc2kgY29uZWN0YSByZXN1cnNlIEFXUyBjdSB0ZW1wbGF0ZSBKYXZhU2NyaXB0IE9iamVjdCBOb3RhdGlvbiAoSlNPTikiLAogICAgICAiTW9uaXRvcml6YSBzaSBjb21hbmRhIG8gaW5zdGFudGEgRUMyIiwKICAgICAgIlRyaW1pdGUgbWVzYWplIGRlIHRpcCBBV1MgU2ltcGxlIE5vdGlmaWNhdGlvbiBTZXJ2aWNlcyAoU05TKSIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiSW5zdGFudGVsZSBBV1MgRUMyIHN1bnQgcHJvdml6aW9uYXRlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkluIFJlZ2l1bmkiLAogICAgICAiR2xvYmFsIiwKICAgICAgIkluIFpvbmVsZSBkZSBEaXNwb25pYmlsaXRhdGUiLAogICAgICAiSW4gQ2VudHJlbGUgZGUgRGF0ZSIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAwCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQmF6YSBkZSBkYXRlIFNRTCBwcm9wcmlldGFyYSBwZW50cnUgcGxhdGZvcm1hIEFXUyBlc3RlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkF1cm9yYSIsCiAgICAgICJNYW5nb0RCIiwKICAgICAgIk15U1FMIiwKICAgICAgIkR5bmFtb0RCIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJBV1MgU2ltcGxlIE5vdGlmaWNhdGlvbiBTZXJ2aWNlIChTTlMpIHBlcm1pdGUgc2E6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiT2ZlcmUgc3Vic2NyaXB0aWkgZGUgdGlwdWw6IGVtYWlsLCBIVFRQL0hUVFBTLCBTTVMgdGV4dCwgU1FTIFF1ZXJpZXMsIGZ1bmN0aWkgTGFtYmEiLAogICAgICAiU2V0YSwgb3BlcmEgc2kgdHJhbnNtaXRlIG5vdGlmaWNhcmkgY2F0cmUgc2VydmljaWlsZSB1dGlsaXphdGUgaW4gZGlmZXJpdGUgYXBsaWNhdGlpIiwKICAgICAgIk1vbml0b3JpemEgc2kgY29tYW5kYSBvIGluc3RhbnRhIEVDMiIsCiAgICAgICJGdW5jdGlvbmVhemEgaW1wcmV1bmEgY3Ugc2VydmljaXVsIENvbHVkV2F0Y2giCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlNlcnZpY2l1bCBFbGFzdGljIENsb3VkIENvbXB1dGluZyDigJMgRUMyIGFzaWd1cmE6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiQ3JlYSwgc2FsdmUgc2kgcmV1dGlsaXphIGluc3RhbnRlIChBbWF6b24gTWFjaGluZSBJbWFnZXMpIiwKICAgICAgIkxhbnNhcmVhIHVuZWkgaW5zdGFudGUgc2F1IGEgdW5laSBmbG90ZSBkZSBpbnN0YW50ZSIsCiAgICAgICJGb2xvc2lyZWEgZGUgZGlmZXJpdGUgdGlwdXJpIGRlIENQVSwgbWVtb3JpZSwgc3RvcmFnZSwgZ3JhZmljYSwgcmV0ZWxlIiwKICAgICAgIlRvYXRlIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJDZSBiYXplIGRlIGRhdGUgUkRTIHN1bnQgZGlzcG9uaWJpbGUgaW4gQVdTOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkF1cm9yYSwgTXlTUUwsIFNRTCwgQ2Fzc2FuZHJhIiwKICAgICAgIlBvc3RHcmVzLCBDYXNzYW5kcmEsIE1hbmdvREIsIEF1cm9yYSIsCiAgICAgICJPcmFjbGUsIFNRTCwgTXlTUUwsIENhc3NhbmRyYSIsCiAgICAgICJPcmFjbGUsIFNRTCwgTXlTUUwsIFBvc3RHcmVzIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJDYXJlIHN1bnQgbW9kYWxpdGF0aWxlIGRlIHBsYXRhIHBlbnRydSBpbnN0YW50ZWxlIEFXUyBFQzI6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiT24tRGVtYW5kLCBTYXZpbmdzIFBsYW5zLCBSZXNlcnZlZCBJbnN0YW5jZXMsIFNwb3QgSW5zdGFuY2VzIiwKICAgICAgIlNhdmluZ3MgUGxhbnMsIFJlc2VydmVkIEluc3RhbmNlcywgU3BvdCBJbnN0YW5jZXMiLAogICAgICAiUmVzZXJ2ZWQgSW5zdGFuY2VzLCBTcG90IEluc3RhbmNlcyIsCiAgICAgICJTcG90IEluc3RhbmNlcywgU2F2aW5ncyBQbGFucywgUmVzZXJ2ZWQgSW5zdGFuY2VzIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJBbGFybWVsZSBkaW4gc2VydmljaXVsIENsb3VkV2F0Y2ggaW5kZXBsaW5lc2MgdXJtYXRvYXJlbGUgYWN0aXVuaToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJSZWJvb3Qgc2F1IFJlY292ZXIgYSB1bmVpIGJhemUgZGUgZGF0ZSBOb1NRTCIsCiAgICAgICJTY2FsYSB1biBBdXRvU2NhbGluZyBncnVwIEluIHNhdSBPdXQgZGUgVlBDIiwKICAgICAgIk1vbml0b3JpemEgc2kgY29tYW5kYSByZXN1cnNlbGUgc2kgc2VydmljaWlsZSBkaW4gQVdTIiwKICAgICAgIlRyaW1pdGUgbWVzYWplIFNNUyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAyCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQ3VtIHNlIG1vbml0b3JpemVhemEgcmVzdXJzZWxlIG9mZXJpdGUgQVdTOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkFXUyBDbG91ZFdhdGNoIiwKICAgICAgIlVuZWx0ZSBmdXJuaXphdGUgZGUgVGVydGUtUGFydGkiLAogICAgICAiRGFzaGJvYXJkIEVDMiIsCiAgICAgICJDb25maWd1cmFyZWEgZGUgbm90aWZpY2FyaSBjYW5kIG9yaWNlIGV2ZW5pbWVudCBzZW1uaWZpY2F0aXYgc2UgaW50YW1wbGEiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkNhcmUgZXN0ZSBjZWwgbWFpIG1hcmUgZnVybml6b3IgZGUgY291ZCBjb21wdXRpbmcgZGluIGx1bWUIiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiR29vZ2xlIENsb3VkIiwKICAgICAgIkFtYXpvbiBXZWIgU2VydmljZXMiLAogICAgICAiTWljcm9zb2Z0IEF6dXJlIiwKICAgICAgIkFsaWJhYmEiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0KXQo,
}

enum Comert {
  ,
}

enum Cryptografie {
  ,
}

enum Fp {
  ,
}

enum Inovare {
  ,
}

enum Java {
  ,
}

enum Python {
  ,
}

enum Poo {
  WwogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgc2VjdmVuyJthIMOubiBsaW1iYWp1bCBDKys6XG5jbGFzcyBjbHN7XG5wdWJsaWM6XG5cdGNscygpeyBjb3V0PDxcImNvbnN0cnVjdG9yXCI7fVxuXHRjbHMoY2xzICZjKXtjb3V0PDxcImNvbnN0cnVjdG9yIGRlIGNvcGllcmVcIjt9XG59O1xuaW50IGYoY2xzIGMpeyByZXR1cm4gMTt9XG5pbnQgbWFpbigpe1xuXHRjbHMgYzsgXG5cdGYoYyk7XG5cdHJldHVybiAwO1xufVxuw45uIG1vbWVudHVsIGV4ZWN1dMSDcmlpIHByb2dyYW11bHVpIGRlIG1haSBzdXM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiY29uc3RydWN0b3J1bCBkZSBjbGFzxIMgc2UgYXBlbGVhesSDIG8gZGF0xIMsIGlhciBjZWwgZGUgY29waWVyZSBudSBzZSBhcGVsZWF6xIM7IiwKICAgICAgImNvbnN0cnVjdG9ydWwgZGUgY2xhc8SDIMWfaSBjZWwgZGUgY29waWVyZSBzZSBhcGVsZWF6xIMgZmllY2FyZSBjw6J0ZSBvIGRhdMSDOyIsCiAgICAgICJjb25zdHJ1Y3RvcnVsIGRlIGNvcGllcmUgc2UgYXBlbGVhesSDIG8gZGF0xIMsIGlhciBjZWwgZGUgY2xhc8SDIG51IHNlIGFwZWxlYXrEgzsiLAogICAgICAiY29uc3RydWN0b3J1bCBkZSBjbGFzxIMgc2UgYXBlbGVhesSDIGRlIGRvdcSDIG9yaSwgaWFyIGNlbCBkZSBjb3BpZXJlIG5pY2lvIGRhdMSDOyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHNlY3ZlbsibYSDDrm4gbGltYmFqdWwgQysrOlxuY2xhc3MgY2xze1xucHVibGljOiBcblx0Y2xzKCl7IGNvdXQ8PFwiY29uc3RydWN0b3JcIjt9XG5cdGNscyhjbHMgJmMpe2NvdXQ8PFwiY29uc3RydWN0b3IgZGUgY29waWVyZVwiO31cbn07XG5pbnQgZihjbHMgJmMpeyByZXR1cm4gMTt9XG5pbnQgbWFpbigpe1xuXHRjbHMgYzsgXG5cdGYoYyk7XG5cdHJldHVybiAwO1xufVxuw45uIG1vbWVudHVsIGV4ZWN1dMSDcmlpIHByb2dyYW11bHVpIGRlIG1haSBzdXM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiY29uc3RydWN0b3J1bCBjbGFzZWkgc2UgYXBlbGVhesSDIG8gZGF0xIMsIGlhciBjZWwgZGUgY29waWVyZSBudSBzZSBhcGVsZWF6xIMgbmljaW8gZGF0xIM7IiwKICAgICAgImNvbnN0cnVjdG9ydWwgZGUgY2xhc8SDIMWfaSBjZWwgZGUgY29waWVyZSBzZSBhcGVsZWF6xIMgZmllY2FyZSBjw6J0ZSBvIGRhdMSDOyIsCiAgICAgICJjb25zdHJ1Y3RvcnVsIGRlIGNvcGllcmUgc2UgYXBlbGVhesSDIG8gZGF0xIMsIGlhciBjZWwgZGUgY2xhc8SDIG51IHNlIGFwZWxlYXrEgzsiLAogICAgICAiY29uc3RydWN0b3J1bCBjbGFzZWkgc2UgYXBlbGVhesSDIGRlIGRvdcSDIG9yaSwgaWFyIGNlbCBkZSBjb3BpZXJlIG5pY2lvIGRhdMSDOyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAwCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHNlY3ZlbsibYSDDrm4gbGltYmFqdWwgQysrOlxuY2xhc3MgQ3tcblx0aW50IGE7XG5wdWJsaWM6XG5cdHZpcnR1YWwgdm9pZCBtZXRvZGExKCk9MDtcblx0dmlydHVhbCB2b2lkIG1ldG9kYTIoKT0wO1xufTsgXG5pbnQgbWFpbigpe1xuXHRDICpwb2I7IC8vZGVjbGFyYcibaWEgMVxuXHRDIG9iOyAvL2RlY2xhcmHIm2lhIDJcblx0QyAqdnBvYls1XTsgLy9kZWNsYXJhyJtpYSAzXG5cdEMgdm9iWzVdOyAvL2RlY2xhcmHIm2lhIDRcblx0cmV0dXJuIDA7XG59XG5EZWNsYXJhyJtpaWxlIGFkbWlzZSDDrm4gYWNlc3QgY2F6IHN1bnQ6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiRGVjbGFyYcibaWlsZSAxIMiZaSAyOyIsCiAgICAgICJEZWNsYXJhyJtpaWxlIDEgc2kgMzsiLAogICAgICAiRGVjbGFyYcibaWlsZSAyIMiZaSA0OyIsCiAgICAgICJEZWNsYXJhyJtpaWxlIDEsIDIgyJlpIDMuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgY2xhc2EgQysrOiBcbmNsYXNzIGMgeyBcblx0aW50IGEsIGIgOyBcbnB1YmxpYyA6IFxuXHRjIChpbnQgLCBpbnQgKSA7IFxuXHRpbnQgZGV0X2EgKCApIHtyZXR1cm4gYSA7fSBcblx0YyAoKSA7IFxufTsgXG5TZW1udWwgfiBhcmUgcm9sdWwgOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImRlIGEgbmVnYSBwZSBiacibaSByZXp1bHRhdHVsIHJldHVybmF0IGRlIG1ldG9kYSBjKCApOyIsCiAgICAgICJkZSBhIHByZWNpemEgZXhpc3RlbsibYSBkZXN0cnVjdG9ydWx1aTsiLAogICAgICAiZGUgYSBuZWdhIGxvZ2ljIHJlenVsdGF0dWwgcmV0dXJuYXQgZGUgbWV0b2RhIGMoICk7IiwKICAgICAgImRlIGEgc3VwcmHDrm5jYXJjYSBjb25zdHJ1Y3RvcnVsIGNsYXNlaTsiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlBvbGltb3JmaXNtdWwgZGluYW1pYyDDrm4gbGltYmFqdWwgQysrIHNlIHJlYWxpemVhesSDIGN1IGFqdXRvcnVsOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImRhdGVsb3Igc2kgbWV0b2RlbG9yIG1lbWJyZSBzdGF0aWNlIiwKICAgICAgIm51IHNlIHBvYXRlIHJlYWxpemEgcG9saW1vcmZpc211bCBkaW5hbWljIMOubiBsaW1iYWp1bCBDKysiLAogICAgICAiY2xhc2Vsb3IgZGVyaXZhdGUiLAogICAgICAicG9pbnRlcmlsb3IgyJlpIGEgZnVuY8ibaWlsb3IgdmlydHVhbGUiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlNlY3ZlbsWjYSB1cm3Eg3RvYXJlIMOubiBsaW1iYWp1bCBDKys6XG5jbGFzcyBjMXtcbnB1YmxpYzpcblx0aW50IGE7XG5cdGMxKGludCB5KXsgYT15O2NvdXQ8PFwiY29uc3RydWN0b3IgMVwiO31cblx0YzEoKXtjb3V0PDxcImRlc3RydWN0b3IgMlwiO31cbn07XG5jbGFzcyBjMjpwdWJsaWMgYzF7XG5wdWJsaWM6IFxuXHRpbnQgYjtcblx0YzIoaW50IHksIGludCB4KTpjMSh5KSB7IGI9eDsgY291dDw8XCJjb25zdHJ1Y3RvciAyXCI7fVxuXHRjMigpe2NvdXQ8PFwiZGVzdHJ1Y3RvciAyXCI7fSBcbn07XG5pbnQgbWFpbigpeyBcblx0YzEgb2IxKDIpO1xuXHRjMiBvYjIoMiwzKTtcblx0cmV0dXJuIDA7XG59XG5hZmnImWVhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImNvbnN0cnVjdG9yIDEgY29uc3RydWN0b3IgMiBkZXN0cnVjdG9yIDIgZGVzdHJ1Y3RvciAxIiwKICAgICAgImNvbnN0cnVjdG9yIDEgY29uc3RydWN0b3IgMSBjb25zdHJ1Y3RvciAyIGRlc3RydWN0b3IgMiBkZXN0cnVjdG9yIDEgZGVzdHJ1Y3RvciAxIiwKICAgICAgImNvbnN0cnVjdG9yIDEgY29uc3RydWN0b3IgMiBjb25zdHJ1Y3RvciAxIGRlc3RydWN0b3IgMSBkZXN0cnVjdG9yIDIgZGVzdHJ1Y3RvciAxIiwKICAgICAgImNvbnN0cnVjdG9yIDEgY29uc3RydWN0b3IgMSBjb25zdHJ1Y3RvciAyIGRlc3RydWN0b3IgMiBkZXN0cnVjdG9yIDEiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSB1cm3Eg3RvcnVsIHByb2dyYW0gQysrOlxuI2luY2x1ZGUgPGlvc3RyZWFtLmgXG5jbGFzcyBCe1xucHVibGljOiBcblx0Qigpe2NvdXQ8PFwiQigpXCI8PGVuZGw7fVxuXHRCKCl7Y291dDw8XCJCKClcIjw8ZW5kbDt9XG59O1xuY2xhc3MgRDogcHVibGljIEJ7IFxucHVibGljOiBcblx0RCgpe2NvdXQ8PFwiRCgpXCI8PGVuZGw7fVxuXHREKCl7Y291dDw8XCJRCgpXCI8PGVuZGw7fVxufTtcbmludCBtYWluKCl7XG5cdEIgKmI9bmV3IEIoKTsgXG5cdGRlbGV0ZSBiO1xuXHRiPW5ldyBEKCk7IFxuXHRkZWxldGUgYjtcblx0cmV0dXJuIDA7XG59XG5Qcm9ncmFtdWwgYWZpyJllYXrEgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJCKCkgfkIoKSBCKCkgRCgpIH5EKCkiLAogICAgICAiQigpIH5CKCkgQigpIEQoKSBQigpIiwKICAgICAgIkIoKSBCKCkgQigpIEIoKSIsCiAgICAgICJCKCkgQigpIEQoKSBCKCkiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSBwcm9ncmFtdWwgQysrOlxuI2luY2x1ZGUgPGlvc3RyZWFtLmgXG5jbGFzcyBCeyBcbnB1YmxpYzogXG5cdEIoKXtjb3V0PDxcIkIoKVwiPDxlbmRsO31cblx0QihCICZiKXtjb3V0PDxcIkIoQiAmYilcIjw8ZW5kbDt9XG59O1xuY2xhc3MgRDogcHVibGljIEJ7IFxucHVibGljOiBcblx0RCgpe2NvdXQ8PFwiRCgpXCI8PGVuZGw7fVxuXHREKEQgJmQpe2NvdXQ8PFwiRChEICZkKVwiPDxlbmRsO31cbn07XG5pbnQgbWFpbigpe1xuXHRCIGI7IFxuXHRCIGIxKGIpOyBcblx0RCBkOyBcblx0RCBkMShkKTtcblx0cmV0dXJuIDA7XG59XG5Qcm9ncmFtdWwgYWZpyJllYXrEgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJCKCkgQihCJmIpIEIoKSBEKCkgQihCICZiKSBEKEQgJmQpIiwKICAgICAgIkIoKSBCKCkgQihCJmIpIEIoKSBEKCkgQihCICZiKSBEKCkgQihCICZiKSIsCiAgICAgICJCKCkgQihCJmIpIEQoKSBCKEIgJmIpIEQoKSBCKEIgJmIpIiwKICAgICAgIkIoKSBCKEImYikgQigpIEQoKSBCKCkgRChEICZkKSIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIGNsYXNhIEMrKyA6XG5jbGFzcyBjIHsgXG5cdGludCBhLGI7XG5wdWJsaWM6XG5cdGZsb2F0IGMgKGludCwgaW50KVxuXHRpbnQgZ2V0X2Ege3JldHVybiBhO31cblx0YyAoKTsgXG59O1xuRGVjbGFyYcWjaWEgZmxvYXQgYyhpbnQsIGludCkgYXIgcHV0ZWEgY29yZXNwdW5kZSB1bnVpIGNvbnN0cnVjdG9yIGFsIGNsYXNlaT8iLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJkYSwgZmlpbmQgbyBzdXByYcOubmNhcmNhcmUgYSBjZWx1aSBleGlzdGVudDsiLAogICAgICAibnUsIGRlb2FyZWNlIGNyZWF6xIMgYW1iaWd1aXRhdGU7IiwKICAgICAgIm51LCBkZW9hcmVjZSBjb25zdHJ1Y3RvcnVsIG51IGFyZSB0aXAgcmV0dXJuYXQ7IiwKICAgICAgIm51LCBkZW9hcmVjZSBudSBlc3RlIGRlIHRpcCBmcmllbmQuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgc2VjdmVuxaNhIHVybcSDdG9hcmU6XG5jbGFzcyBwZXJzb2FuYXtcblx0aW50IHZhcnN0YTtcbnB1YmxpYzpcblx0cGVyc29hbmEoaW50IHY9MTgpe3ZhcnN0YT12O31cblx0cGVyc29hbmEmIG9wZXJhdG9yKysoaW50KXt2YXJzdGErKzsgcmV0dXJuICp0aGlzO31cblx0aW50IGdldF92YXJzdGEoKXtyZXR1cm4gdmFyc3RhO31cbn07XG5pbnQgbWFpbigpe1xuXHRwZXJzb2FuYSBwKDIwKTtcblx0Y291dDw8cCsrLmdldF92YXJzdGEoKTtcblx0cmV0dXJuIDA7XG59XG5TZWN2ZW7Im2EgYWZpyJllYXrEgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIyMSIsCiAgICAgICIyMCIsCiAgICAgICIxOCIsCiAgICAg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XrEgyBkZSB0cmVpIG9yaTsiLAogICAgICAic2UgYXBlbGVhesSDIGRlIHBhdHJ1IG9yaS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSB1cm3Eg3RvcnVsIHByb2dyYW0gQysrOlxuI2luY2x1ZGU8aW9zdHJlYW0uaD5cbmNsYXNzIHNhbGFyaWF0eyBcblx0aW50IHZhcnN0YTtcbnB1YmxpYzpcblx0c2FsYXJpYXQgKGludCB2PTIwKSB7dmFyc3RhID12O31cblx0b3BlcmF0b3IgaW50KCkgeyByZXR1cm4gdmFyc3RhO31cblx0c2FsYXJpYXQmIG9wZXJhdG9yKysoKXt2YXJzdGErKzsgcmV0dXJuICp0aGlzO31cblx0c2FsYXJpYXQgb3BlcmF0b3IrKyAoaW50KSB7IHZhcnN0YSsrOyByZXR1cm4gKnRoaXM7fVxufTtcbmludCBtYWluKCl7IFxuXHRzYWxhcmlhdCBzKDIxKTtcblx0aW50IGE9cysrLCBiPSsrcztcblx0Y291dDw8YTw8XCIgXCI8PGI8PGVuZGw7XG5cdHJldHVybiAwO1xufVxuUHJvZ3JhbXVsIGFmaciZZWF6xIM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiMjAgMjEiLAogICAgICAiMjEgMjIiLAogICAgICAiMjIgMjMiLAogICAgICAiMjAgMjIiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSB1cm3Eg3RvcnVsIHByb2dyYW0gQysrOlxuI2luY2x1ZGUgPGlvc3RyZWFtLmgXG5jbGFzcyBDZXJje1xucHVibGljOiBcblx0ZmxvYXQgcmF6YTtcblx0Q2VyYyhmbG9hdCByKXtyYXphPXI7fVxuXHRmbG9hdCBnZXRfcmF6YSgpe3JldHVybiByYXphO31cblx0Q2VyYyBvcGVyYXRvcisrKCl7cmF6YSsrOyByZXR1cm4gKnRoaXM7fVxuXHRDZXJjIG9wZXJhdG9yLS0oKXtyYXphLS07IHJldHVybiAqdGhpczt9XG59O1xuaW50IG1haW4oKXsgXG5cdENlcmMgYygzLjUpO1xuXHRjb3V0PDwoKysoKytjKSkuZ2V0X3JhemEoKTw8XCIgXCI7IFxuXHRjb3V0PDxjLmdldF9yYXphKCk8PFwiIFwiO1xuXHRjb3V0PDwoLS0oLS1jKSkuZ2V0X3JhemEoKTw8XCIgXCI7XG5cdGNvdXQ8PGMuZ2V0X3JhemEoKTw8XCIgXCI7XG5cdHJldHVybiAwO1xufVxuUHJvZ3JhbXVsIGFmaciZZWF6xIM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiMy41IDQuNSAyLjUgMy41IiwKICAgICAgIjUuNSA0LjUgMi41IDIuNSIsCiAgICAgICIyLjUgNS41IDQuNSAzLjUiLAogICAgICAiNS41IDQuNSAyLjUgMy41IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgc2VjdmVuyJthIGRlIHByb2dyYW0gQysrOlxuI2luY2x1ZGUgPGlvc3RyZWFtLmgXG5jbGFzcyBDe1xucHVibGljOiBcblx0c3RhdGljIGludCBzO1xufTtcbmludCBDOjpzPTA7XG5pbnQgbWFpbigpeyBcblx0aW50IGE9NzsgQzo6cz1hOyBcblx0Y291dDw8Qzo6cztcblx0cmV0dXJuIDA7XG59XG7Djm4gc2VjdmVuyJthIGRlIG1haSBzdXMsIGluacibaWFsaXphcmVhIGx1aSBzIGVzdGU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiaWxlZ2FsxIMsIGRlb2FyZWNlIG51IGV4aXN0xIMgbmljaXVuIG9iaWVjdCBjcmVhdDsiLAogICAgICAiaWxlZ2FsxIMsIGRlb2FyZWNlIHMgZXN0ZSBpbmnIm2lhbGl6YXQgw65uIGFmYXJhIGNsYXNlaTsiLAogICAgICAiaWxlZ2FsxIMsIGRlb2FyZWNlIHMgZXN0ZSBkdWJsdSBkZWZpbml0LCDDrm4gY2xhc8SDIMiZaSDDrm4gYWZhcmEgZWk7IiwKICAgICAgImNvcmVjdMSDLCBkZW9hcmVjZSBtZW1icmkgc3RhdGljaSBleGlzdMSDIMOubmFpbnRlIGRlIGEgc2UgY3JlYSBvYmllY3RlIGRpbiBjbGFzxIMuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgc2VjdmVuyJthIEMrKzpcbmNsYXNzIGNvbXBsZXh7XG5cdGRvdWJsZSByZTtcblx0ZG91YmxlIGltO1xucHVibGljOlxuXHRjb21wbGV4KGRvdWJsZSB4PTEuMCxkb3VibGUgeT02LjgwKXtyZT14OyBpbT15O31cblx0Y29tcGxleCggY29uc3QgY29tcGxleCAmdSl7cmU9dS5yZTtpbT11LmltO31cbn07IFxuUHJlY2l6YcWjaSDDrm4gY2Ugc2l0dWHFo2llIHNlIHV0aWxpemVhesSDIGNvbnN0cnVjdG9ydWwgZGUgY29waWVyZToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJjb21wbGV4IHoxKDUuMiwgMy42KTsiLAogICAgICAiY29tcGxleCB6MSg1LjIsIDMuNiksIHoyPXoxOyIsCiAgICAgICJjb21wbGV4IHozKDAuMSwxLjApOyIsCiAgICAgICJjb21wbGV4IHo1KC0wLjEsMjguNykuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgc2VjdmVuyJthIEMrKzogXG5jbGFzcyBBMXtcbnB1YmxpYzpcblx0QTEoKXtjb3V0IDw8IFwiQTEgXCI7fVxufTtcbmNsYXNzIEEye1xucHVibGljOlxuXHRBMigpe2NvdXQgPDwgXCJBMiBcIjt9XG59O1xuY2xhc3MgQUExIDogcHVibGljIEExLCB2aXJ0dWFsIHB1YmxpYyBBMntcbnB1YmxpYzpcblx0QUExKCl7Y291dCA8PCBcIkFBMSBcIjt9XG59O1xuY2xhc3MgQUEyIDogcHVibGljIEExLCB2aXJ0dWFsIEEye1xucHVibGljOlxuXHRBQTIoKXtjb3V0IDw8IFwiQUEyIFwiO31cbn07XG5jbGFzcyBCIDogcHVibGljIEFBMSwgdmlydHVhbCBwdWJsaWMgQUEye1xucHVibGljOlxuXHRCKCl7Y291dCA8PCBcIkIgXCI7fVxufTtcbmludCBtYWluKCl7XG5cdEIgb2IxO1xuXHRyZXR1cm4gMDtcbn1cblNlY3ZlbsibYSBhZmnImWVhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkExIEEyIEFBMiBBMSBBQTEgQiIsCiAgICAgICJBMiBBMiBBQTIgQUExIEExIEIiLAogICAgICAiQTEgQTIgQUEyIEExIEIgQUExIiwKICAgICAgIkEyIEExIEFBMiBBMSBBQTEgQiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHByb2dyYW11bCBDKys6XG4jaW5jbHVkZSA8aW9zdHJlYW0uaD5cbmNsYXNzIENlcmN7XG5cdGZsb2F0IHJhemE7XG5wdWJsaWM6XG5cdENlcmMoZmxvYXQgcil7cmF6YT1yO31cblx0ZmxvYXQgZ2V0X3JhemEoKXtyZXR1cm4gcmF6YTt9XG5cdHZvaWQgb3BlcmF0b3IrKygpe3JhemErKzt9XG59O1xuY2xhc3MgQ2lsaW5kcnUgOiBwdWJsaWMgQ2VyY3tcblx0ZmxvYXQgaW5hbHRpbWU7XG5wdWJsaWM6IFxuXHRDaWxpbmRydShmbG9hdCByYXphLCBmbG9hdCBpKTpDZXJjKHJhemEpe2luYWx0aW1lPWk7fVxuXHR2b2lkIG9wZXJhdG9yKysoKXtpbmFsdGltZSsrO31cblx0ZmxvYXQgZ2V0X2luYWx0aW1lKCl7cmV0dXJuIGluYWx0aW1lO31cbn07XG5pbnQgbWFpbigpe1xuXHRDZXJjICpwYztcblx0Q2lsaW5kcnUgYygyLDYpO1xuXHRwYz0mYztcblx0KysgKnBjO1xuXHRjb3V0PDxwYy0Z2V0X3JhemEoKTw8XCIgXCI8PGMuZ2V0X2luYWx0aW1lKCk8PGVuZGw7XG5cdHJldHVybiAwO1xufVxuUHJvZ3JhbXVsIGFmaciZZWF6xIM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiMiA1IiwKICAgICAgIjIgNiIsCiAgICAgICIzIDYiLAogICAgICAiMiA1IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgdXJtxIN0b3J1bCBwcm9ncmFtIEMrKzpcbiNpbmNsdWRlPG9zdHJlYW0uaD5cbmNsYXNzIHBlcnNvYW5heyBcblx0aW50IHZhcnN0YSwgc2FsYXJpdWw7XG5cdGZyaWVuZCBvc3RyZWFtICYgb3BlcmF0b3I8PChvc3RyZWFtICZvdXQscGVyc29hbmEgcCl7XG5cdFx0b3V0PDxwLnZhcnN0YTw8XCIgXCI8PHAuc2FsYXJpdWw7IHJldHVybiBvdXQ7XG5cdH1cbnB1YmxpYzpcblx0cGVyc29hbmEoaW50IHYpe3ZhcnN0YT12O3NhbGFyaXVsPTA7fVxuXHRwZXJzb2FuYSgpe3ZhcnN0YT0wO3NhbGFyaXVsPTA7fVxufTtcbmludCBtYWluKCl7XG5cdHBlcnNvYW5hIHAoMSk7Y291dDw8cDtcblx0cmV0dXJuIDA7XG59XG5Qcm9ncmFtdWwgYWZpyJllYXrEgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIxIDAiLAogICAgICAiMCAwIiwKICAgICAgIjEgMSIsCiAgICAgICIwIDEiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSBwcm9ncmFtdWwgQysrOlxuY2xhc3MgY3sgXG5cdGludCBhO1xuIHB1YmxpYzpcblx0Yygpe307XG5cdGMoY29uc3QgYyYpe307XG5cdHZvaWQgb3BlcmF0b3I9KGMmKXt9O1xufTsgXG5pbnQgbWFpbigpeyBcblx0YyBhO1xuXHRjIGI9YTtcbn1cbkxpbmlhIGRlIGNvZCBjIGI9YTsgZGV0ZXJtaW7EgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJleGVjdXRhcmVhIGNvbnN0cnVjdG9ydWx1aSBkZSBjb3BpZXJlOyIsCiAgICAgICJleGVjdXRhcmVhIG1ldG9kZWkgcHJpbiBjYXJlIHNlIHN1cHJhw65uY8SDcmPEgyBvcGVyYXRvcnVsID07IiwKICAgICAgImV4ZWN1dGFyZWEgYXTDonQgYSBjb25zdHJ1Y3RvcnVsdWkgZGUgY29waWVyZSwgY8OidCDImWkgYSBtZXRvZGVpIG9wZXJhdG9yID07IiwKICAgICAgIm8gZXJvYXJlLCBkZW9hcmVjZSBudSBlc3RlIHBlcm1pc8SDIGNvbWJpbmFyZWEgYXRyaWJ1aXJpaSBjdSBvIGRlY2xhcmHIm2llOyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAwCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6XG4jaW5jbHVkZTxpb3N0cmVhbS5oPlxuY2xhc3MgY2xzeyBcbnB1YmxpYzogXG5cdGNscygpe2NvdXQ8PFwiXG4gRGVzdHJ1Y3RvclwiO31cbn07XG5pbnQgbWFpbigpe1xuXHRjbHMgKnBvPW5ldyBjbHNbM107IFxuXHRkZWxldGUgW11wbztcbn1cbkRlc3RydWN0b3J1bCBjbGFzZWk6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAibnUgc2UgYXBlbGVhesSDIG5pY2lvIGRhdMSDOyIsCiAgICAgICJzZSBhcGVsZWF6xIMgbyBkYXTEgzsiLAogICAgICAic2UgYXBlbGVhesSDIGRlIHRyZWkgb3JpOyIsCiAgICAgICJzZSBhcGVsZWF6xIMgZGUgcGF0cnUgb3JpLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAyCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiTyBmdW5jyJtpZSBpbmRlcGVuZGVudMSDIGRlY2xhcmF0xIMgZnJpZW5kIMOubiBkb21lbml1bCBwdWJsaWMgZGludHItbyBjbGFzxIMgQysrIMiZaSBjYXJlIHByaW1lyJl0ZSBjYSBwYXJhbWV0cnUgbyByZWZlcmluyJvEgyBsYSB1biBvYmllY3QgYWwgY2xhc2VpIHJlc3BlY3RpdmUgYXJlIGFjY2VzOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImRvYXIgbGEgbWVtYnJpaSBkZWNsYXJhyJtpIHB1YmxpYzsiLAogICAgICAibGEgdGIm2kgbWVtYnJpaTsiLAogICAgICAibGEgbWVtYnJpaSBwdWJsaWMgyJlpIGxhIGNlaSBwcm90ZWN0ZWQ7IiwKICAgICAgImxhIG1lbWJyaWkgcHJvdGVjdGVkLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6XG4jaW5jbHVkZTxpb3N0cmVhbS5oPlxuY2xhc3MgQXtcblx0aW50IGFbM107XG5wdWJsaWM6XG5cdEEoaW50IGksIGludCBqLCBpbnQgayl7YVswXT1pOyBhWzFdPWo7IGFbMl09azt9XG5cdGludCYgb3BlcmF0b3JbXShpbnQgaSl7cmV0dXJuIGFbaV07fVxufTtcbmludCBtYWluKCl7XG5cdEEgb2IoMSwyLDMpOyBjb3V0PDxvYlsxXTtcblx0b2JbMV09MjU7IGNvdXQ8PG9iWzFdO1xuXHRyZXR1cm4gMDsgXG59XG5DZSBzZSBwb2F0ZSBhZmlybWEgZGVzcHJlIG9wZXJhdG9yPzogIiwKICAgICJhbnN3ZXJzIjogWwogICAgICAicHJvZHVjZSBzdXByYcOubmPEg3JjYXJlYSB1bmVpIGZ1bmPFo2lpOyIsCiAgICAgICJwcm9kdWNlIHN1cHJhw65uY8SDcmNhcmVhIHVudWkgb3BlcmF0b3IgdW5hcjsiLAogICAgICAic3VwcmHDrm5jYXJjxIMgb3BlcmF0b3J1bCBbXTsiLAogICAgICAiZXN0ZSBvIGZ1bmPFo2llIG1lbWJydSBvYXJlY2FyZSBhIGNsYXNlaSBBLCBjYXJlIG51IHByb2R1Y2Ugc3VwcmHDrm5jxINyY2FyZWEgdW51aSBvcGVyYXRvcjsiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkNvbnNpZGVyxINtIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6XG4jaW5jbHVkZTxpb3N0cmVhbS5oPlxuY2xhc3MgQ3tcbnB1YmxpYzpcblx0aW50IHg7XG5cdEMoaW50IHYpIHsgeD12O31cblx0ZG91YmxlIG9wZXJhdG9yKyhDICZjLCBkb3VibGUgZCl7cmV0dXJuIGMueCtkO31cblx0ZG91YmxlIG9wZXJhdG9yKyhkb3VibGUgZCwgQyAmYyl7cmV0dXJuIGMueCtkO31cbn07XG5pbnQgbWFpbigpIHtcblx0QyBjKDUpOyBcblx0Y291dDw8MitjKzM7IFxuXHRyZXR1cm4gMDtcbn1cblN0YWJpbGnIm2kgY2FyZSBkaW50cmUgdXJtxIN0b2FyZWxlIGFmaXJtYcibaWkgc3VudCBhZGV2xINyYXRlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgInN1cHJhw65uY8SDcmPEg3JpbGUgb3BlcmF0b3IgKyAoKSB0cmVidWllIHPEgyBmaWUgZnJpZW5kOyIsCiAgICAgICJzdXByYcOubmPEg3JjxINyaWxlIG9wZXJhdG9yKygpIG51IHNlIGp1c3RpZmljxIMgZGVvYXJlY2UgYXUgYWNlbGHImWkgY29kOyIsCiAgICAgICJwcm9ncmFtdWwgYWZpyJllYXrEgyAxMDsiLAogICAgICAic3VwcmHDrm5jxINyY8SDcmlsZSBvcGVyYXRvcisoKSB0cmVidWllIHPEgyByZXR1cm5lemUgcmVmZXJpbsibZS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSBwcm9ncmFtdWwgQysrOlxuI2luY2x1ZGU8aW9zdHJlYW0uaD5cbmNsYXNzIGMxeyBpbnQgYTt9OyIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImZ1bmPIm2lhIHNjcmllX2EoICkgbnUgYXJlIGFjY2VzIGFzdXByYSB1bnVpIG1lbWJydSBwcml2YXQ7IiwKICAgICAgInByb2dyYW11bCBhZmnImWVhesSDIHZhbG9hcmVhIGx1aSBhOyIsCiAgICAgICJkZXJpdmFyZWEgcHVibGljxIMgZXN0ZSBpbmNvcmVjdCByZWFsaXphdMSDOyIsCiAgICAgICJwcmluIGRlcml2YXJlIHB1YmxpY8SDLCBhY2Nlc3VsIGxhIG1lbWJyaWkgbWFn3RlbmnFo2kgZGV2aW5lIHB1YmxpYy4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSBwcm9ncmFtdWwgdXJtxIN0b3IgQysrOlxuI2luY2x1ZGU8aW9zdHJlYW0uaD5cbmNsYXNzIEJ7IFxuXHRpbnQgeDtcbnB1YmxpYzpcblx0QihpbnQgaT0xMCkgeyB4PWk7fVxuXHRpbnQgZ2V0X3goKSB7IHJldHVybiB4OyB9IFxufTtcbmNsYXNzIEQ6IHB1YmxpYyBCeyBcbnB1YmxpYzogXG5cdEQoaW50IGkpOkIoaSl7fVxuXHREIG9wZXJhdG9yKyhjb25zdCBEJiBhKSB7cmV0dXJuIHgrYS54OyB9IFxufTtcbmludCBtYWluKCl7IFxuXHREIG9iMSg3KSwgb2IyKC0xMik7XG5cdGNvdXQ8PChvYjErb2IyKS5nZXRfeCgpO1xuXHRyZXR1cm4gMDtcbn1cblByb2dyYW11bCBhZmnImWVhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImVyb2FyZSwgY2xhc2EgQiBudSBwb2F0ZSBmaSBtb8iZdGVuaXTEgyBkZSBjbGFzYSBEOyIsCiAgICAgICJlcm9hcmUsIG1ldG9kYSBvcGVyYXRvciBudSBhcmUgYWNjZXMgbGEgdW4gbWVtYnJ1IHByaXZhdCBhbCBjbGFzZWkgZGUgYmF6xIM7IiwKICAgICAgInByb2dyYW11bCBhZmnImWVhesSDIHZhbG9hcmVhIC01OyIsCiAgICAgICJlcm9hcmUsIG9wZXJhdG9ydWwgKyBudSBzZSBwb2F0ZSBhcGxpY2EgcGVudHJ1IHRpcHVyaSBhYnN0cmFjdGUgZGUgZGF0ZS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkZpZSB1cm3Eg3RvcnVsIHByb2dyYW0gQysrOlxuI2luY2x1ZGU8aW9zdHJlYW0uaD5cbmNsYXNzIEIxe2ludCB4O307XG5jbGFzcyBCMntpbnQgeTt9O1xuY2xhc3MgQjN7aW50IHo7fTtcbmNsYXNzIEI0e2ludCB0O307XG5jbGFzcyBEOiBwdWJsaWMgQjEsIHByaXZhdGUgQjIsIHByb3RlY3RlZCBCMyxCNCB7cHVibGljIDogaW50IG07fTtcbmludCBtYWluKCl7IFxuXHREIGQ7XG5cdGNvdXQ8PGQubTsgLy92YXJpYW50YSAxXG5cdGNvdXQ8PGQueDsgLy92YXJpYW50YSAyXG5cdGNvdXQ8PGQueTsgLy92YXJpYW50YSAzXG5cdHJldHVybiAwO1xufVxuVmFyaWFudGVsZSBjYXJlIHBlcm1pdCBhY2Nlc3VsIGxhIHZhcmlhYmlsZSBwZW50cnUgYWZpyJlhcmUgc3VudDoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIxKzM7IiwKICAgICAgIjErMjsiLAogICAgICAiMSsyKzM7IiwKICAgICAgIjEiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkNvbnNpZGVyxINtIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6IFxuY2xhc3MgdmVjdG9yeyBcblx0aW50ICogcGUsIG5yX2M7XG5wdWJsaWM6XG5cdG9wZXJhdG9yIGludCAoKXtyZXR1cm4gbnJfYzt9XG5cdHZlY3RvcihpbnQpO1xufTtcbnZlY3Rvcjo6dmVjdG9yKGludCBuKXtcblx0cGU9bmV3IGludFtuXTsgbnJfYz1uO1xuXHR3aGlsZShuLS0pIHBlW25dPW47XG59XG52b2lkIGYoaW50IGkpe2NvdXQ8PGk8PGVuZGw7fVxuaW50IG1haW4oKXsgXG5cdHZlY3RvciB4KDEwKTtcblx0Zih4KTsgXG5cdHJldHVybiAwO1xufVxuUHJvZ3JhbXVsIGFmacWfZWF6xIM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiOSIsCiAgICAgICIxMCIsCiAgICAgICJudW1lcmVsZSBkZSBsYSAxIGxhIDEwIiwKICAgICAgIm51bWVyZWxlIGRlIGxhIDAgbGEgOSIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQ29uc2lkZXLEg20gdXJtxIN0b3J1bCBwcm9ncmFtIEMrKzpcbmNsYXNzIGN7IFxuXHRpbnQgYTtcbnB1YmxpYzpcblx0dmlydHVhbCB2b2lkIG1ldG9kYTEoKT0wO1xuXHR2aXJ0dWFsIHZvaWQgbWV0b2RhMihpbnQpPTA7XG59O1xuaW50IG1haW57XG5cdGMgKnBvYjsgLy9kZWNsYXJhxaNpYSAxXG5cdGMgb2I7IC8vZGVjbGFyYcWjaWEgMlxuXHRjICp2cG9iWzNdOyAvL2RlY2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9bmV3IEQ7XG5cdGNvdXQ8PGYocCk7XG5cdGRlbGV0ZSBwO1xuXHRjb3V0PDxEOjpnZXRfeCgpO1xuXHRyZXR1cm4gMDtcbn1cblByb2dyYW11bCBhZmnFn2VhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImVyb2FyZSwgZGF0YSBtZW1icsSDIHN0YXRpY8SDIHggbnUgZXN0ZSBpbmnFo2lhbGl6YXTEgzsiLAogICAgICAiZXJvYXJlLCBtZXRvZGEgZ2V0X3goKSBudSBwb2F0ZSBmaSBkZWNsYXJhdMSDIHN0YXRpYzsiLAogICAgICAicHJvZ3JhbXVsIGFmacWfZWF6xIMgdmFsb2FyZWEgMjIxOyIsCiAgICAgICJwcm9ncmFtdWwgYWZpxZ9lYXrEgyB2YWxvYXJlYSAyMjAuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgdXJtxIN0b3J1bCBwcm9ncmFtIEMrKzpcbiNpbmNsdWRlIDxpb3N0cmVhbS5oPlxudGVtcGxhdGU8Y2xhc3MgVCwgY2xhc3MgRT5cbmZsb2F0IGYoVCB4LCBFIHkpeyByZXR1cm4geCt5O31cbmZsb2F0IGcoaW50IHgsIGZsb2F0IHkpeyByZXR1cm4geC15O31cbmludCBtYWluKCl7IFxuXHRpbnQgYT01O1xuXHRmbG9hdCBiPTguNjtcblx0Y291dDw8ZyhhLGIpO1xuXHRyZXR1cm4gMDtcbn1cblByb2dyYW11bCBhZmnFn2VhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjMiLAogICAgICAiZXJvYXJlLCBwYXJhbWV0cml6YXJlYSBjbGFzZWkgVCBlc3RlIGluY29ycmVjdCByZWFsaXphdMSDIiwKICAgICAgIjEzLjYiLAogICAgICAiLTMuNiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6XG4jaW5jbHVkZSA8aW9zdHJlYW0uaD5cbnRlbXBsYXRlPGNsYXNzIFQXG5pbnQgZihUIHgsIFQgeSl7IHJldHVybiB4K3k7fVxuaW50IGYoaW50IHgsIGludCB5KXsgcmV0dXJuIHgteTt9IFxuaW50IG1haW4oKXsgXG5cdGludCBhPTU7XG5cdGZsb2F0IGI9OC42O1xuXHRjb3V0PDxmKGEsYik7XG5cdHJldHVybiAwO1xufVxuUHJvZ3JhbXVsIGFmacWfZWF6xIM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiLTMiLAogICAgICAiZXJvYXJlLCBwYXJhbWV0cml6YXJlYSBjbGFzZWkgVCBlc3RlIGluY29ycmVjdCByZWFsaXphdMSDIiwKICAgICAgIjEzLjYiLAogICAgICAiMy42IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgdXJtxIN0b3J1bCBwcm9ncmFtIEMrKzpcbiNpbmNsdWRlPGlvc3RyZWFtLmgXG5jbGFzcyBCeyBcblx0aW50IHg7XG5wdWJsaWM6IFxuXHRCKGludCBpPTEwKSB7IHg9aTsgfVxuXHRpbnQgZ2V0X3goKSB7IHJldHVybiB4OyB9fTsiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICItNSIsCiAgICAgICItNCIsCiAgICAgICJlcm9hcmUsIMOubiBjbGFzYSBkZXJpdmF0xIMgRCBudSBzZSBwb2F0ZSBhY2Nlc2EgZGF0YSBtZW1icsSDIHByaXZhdMSDIHggYSBjbGFzZWkgQiIsCiAgICAgICItMyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAyCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6XG4jaW5jbHVkZTxpb3N0cmVhbS5oPlxuY2xhc3MgQnsgXG5wdWJsaWM6IFxuXHRpbnQgeDtcblx0QihpbnQgaT0xNikgeyB4PWk7IH1cblx0QiBmKEIgb2IpIHsgcmV0dXJuIHgrb2IueDsgfSB9O1xuY2xhc3MgRDogcHVibGljIEJ7IFxucHVibGljOiBcblx0RChpbnQgaT0yNSkgeyB4PWk7IH1cblx0QiBmKEIgb2IpIHsgcmV0dXJuIHgrb2IueCsxOyB9XG5cdHZvaWQgYWZpc2FyZSgpeyBjb3V0PDx4OyB9IH07XG5pbnQgbWFpbigpXG57IFxuXHRCIHAxPW5ldyBELCBwMj1uZXcgQiwgcDM9bmV3IEIocDEtPmYocDIpKTtcblx0Y291dDw8cDMtPng7XG5cdHJldHVybiAwOyBcbn1cblByb2dyYW11bCBhZmnFn2VhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjQxIiwKICAgICAgImVyb2FyZSwgw65uIGNsYXNhIGRlcml2YXTEgyBEIG51IHNlIHBvYXRlIGFjY2VzYSBkYXRhIG1lbWJyxIMgeCBhIGNsYXNlaSBCIiwKICAgICAgIjE2IiwKICAgICAgIjI1IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGaWUgdXJtxIN0b3J1bCBwcm9ncmFtIEMrKzpcbiNpbmNsdWRlPGlvc3RyZWFtLmgIFxuY2xhc3MgY2xzMXsgXG5wdWJsaWM6IFxuXHRpbnQgYTsgXG5cdGNsczEoKSB7IGE9NzsgfSBcbn07IFxuY2xhc3MgY2xzMnsgXG5wdWJsaWM6IFxuXHRpbnQgYjsgXG5cdGNsczIoaW50IGkpIHsgYj1pOyB9IFxuXHRjbHMyKGNsczEmIHgpIHsgYj14LmE7IH0gXG59OyBcbmludCBtYWluKCl7IFxuXHRjbHMxIHg7IFxuXHRjb3V0PDx4LmE7IFxuXHRjbHMyIHkoeCk7IFxuXHRjb3V0PDx5LmI7IFxuXHRyZXR1cm4gMDsgXG59XG5Qcm9ncmFtdWwgYWZpxZ9lYXrEgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICI3IDciLAogICAgICAiZXJvYXJlLCBjb25zdHJ1Y3RvcnVsIGRlIGNvcGllcmUgbnUgZXN0ZSBjb3JlY3QgZGVmaW5pdCIsCiAgICAgICJlcm9hcmUsIGNvbnN0cnVjdG9ydWwgZGUgY29waWVyZSBudSBwb2F0ZSBhY2Nlc2EgbyBkYXTEgyBwdWJsaWPEgyBhIGNsYXNlaSBjbHMxIiwKICAgICAgIjc4IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJPIGZ1bmPFo2llIGZyaWVuZCBkaWZlcsSDIGRlIG8gbWV0b2TEgyBvYmnFn251aXTEgyBhIHVuZWkgY2xhc2UgcHJpbiBmYXB0dWwgY8SDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIm51IHNlIHBvYXRlIGRlZmluaSBpbmxpbmU7IiwKICAgICAgIm51IHByaW1lxZ90ZSBwb2ludGVydWwgaW1wbGljaXQgbGEgb2JpZWN0IHRoaXM7IiwKICAgICAgIm51IHBvYXRlIGFjY2VzYSBkZWPDonQgcGFydGVhIHB1YmxpY8SDIGEgb2JpZWN0dWx1aTsiLAogICAgICAic2UgZm9sb3NlxZ90ZSBkb2FyIHBlbnRydSBzdXByYcOubmPEg3JjYXJlYSBvcGVyYXRvcmlsb3I7IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJPIGZ1bmPFo2llIGluZGVwZW5kZW50xIMgZGVjbGFyYXTEgyBmcmllbmQgw65uIGRvbWVuaXVsIHByaXZhdGUgZGludHItbyBjbGFzxIMgxZ9pIGNhcmUgcHJpbWXFn3RlIGNhIHBhcmFtZXRydSBvIHJlZmVyaW7Fo8SDIGxhIHVuIG9iaWVjdCBhbCBjbGFzZWkgcmVzcGVjdGl2ZSBhcmUgYWNjZXM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiZG9hciBsYSBtZW1icmlpIHB1YmxpY2k7IiwKICAgICAgImxhIHRvdGkgbWVtYnJpaTsiLAogICAgICAibGEgbWVtYnJpaSBwdWJsaWMgxZ9pIHByb3RlY3RlZDsiLAogICAgICAibGEgbWVtYnJpaSBwcml2YXRlOyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIHVybcSDdG9ydWwgcHJvZ3JhbSBDKys6IFxuI2luY2x1ZGUgPGlvc3RyZWFtPiBcbnVzaW5nIG5hbWVzcGFjZSBzdGQ7IFxuY2xhc3MgY3sgXG5cdGludCBhO1xucHVibGljIDogXG5cdGMoKSB7fSBcblx0Yyhjb25zdCBjJik7IFxuXHRjJiBvcGVyYXRvciA9KGMmKTt9OyBcbmMmIGM6Om9wZXJhdG9yPShjICZjKXsgY291dCA8PCBlbmRsIDw8IFwiY29waWVyZSBjdSBlZ2FsXCI7IHJldHVybiBjO30gXG5jOjpjKGNvbnN0IGMgJmMpIHsgY291dCA8PCBlbmRsIDw8IFwiQ29uc3RydWN0b3IgZGUgY29waWVyZVwiOyB9IFxuaW50IG1haW4oKSBcbnsgXG5cdGMgeCx5PXg7IFxuXHRjIGI9eDsgeD15OyBcbn07IFxuUHJvZ3JhbXVsOiAiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJhcGVsZWF6YSBkZSBkb3VhIG9yaSBvcGVyYXRvcj0oKSwgbyBkYXRhIGNvbnN0cnVjdG9ydWwgZGUgY29waWVyZSBzaSBvIGRhdGEgY29uc3RydWN0b3J1bCBpbXBsaWNpdDsiLAogICAgICAiYXBlbGVhemEgZGUgdHJlaSBvcmkgY29uc3RydWN0b3J1bCBkZSBjb3BpZXJlLCBvIGRhdGEgY29uc3RydWN0b3J1bCBpbXBsaWNpdDsiLAogICAgICAiYXBlbGVhemEgZGUgdHJlaSBvcmkgc3VwcmFpbmNhcmNhcmVhIG9wZXJhdG9ydWx1aSA9OyIsCiAgICAgICJhcGVsZWF6YSBkZSBkb3VhIG9yaSBjb25zdHJ1Y3RvcnVsIGRlIGNvcGllcmUsIG8gZGF0YSBvcGVyYXRvcj0oKSBzaSBvIGRhdGEgY29uc3RydWN0b3J1bCBpbXBsaWNpdDsiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkRlIGPDonRlIG9yaSBlc3RlIGFwZWxhdCBkZXN0cnVjdG9ydWwgY2xhc2VpIFBlcnNvYW5hIMOubiBwcm9ncmFtdWwgdXJtw6N0b3IgQysrPyBcbiNpbmNsdWRlIDxpb3N0cmVhbT4gXG51c2luZyBuYW1lc3BhY2Ugc3RkOyBcbmNsYXNzIFBlcnNvYW5heyBcbnB1YmxpYzogXG5cdFBlcnNvYW5hKCkge2NvdXQ8PFwiQ29uc3RydWN0b3JcIjw8ZW5kbDt9IFxuXHRUGVyc29hbmEoKSB7Y291dDw8XCJEZXN0cnVjdG9yXCI8PGVuZGw7fX07IFxuaW50IG1haW4oKXsgXG5cdFBlcnNvYW5hIHBwcDsgXG5cdHBwcCA9IG5ldyBQZXJzb2FuYVs1XTsgXG5cdGZvcihpbnQgaT0wOyBpPDU7IGkrKykgXG5cdFx0cHBwW2ldID0gbmV3IFBlcnNvYW5hKCk7IFxuXHRmb3IoaW50IGk9MDsgaTw1OyBpKyspIFxuXHRcdGRlbGV0ZSBwcHBbaV07IFxufSBcblLEg3NwdW5zOiAiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIxMDsiLAogICAgICAiNjsiLAogICAgICAiNzsiLAogICAgICAiNTsiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIsOObiBwcm9ncmFtdWwgdXJtw6N0b3IgQysrOiBcbiNpbmNsdWRlIDxpb3N0cmVhbT4gXG51c2luZyBuYW1lc3BhY2Ugc3RkOyBcbmNsYXNzIFBlcnNvYW5heyBcblx0aW50IHZhcnN0YTsgXG5cdGNoYXIgbnVtZTsgXG5wdWJsaWM6IFxuXHRQZXJzb2FuYShpbnQgdj0wLCBjaGFyKiBuPVwiT2FyZWNhcmVcIik6dmFyc3RhKHYpeyBcblx0XHR0aGlzLT5udW1lID0gbmV3IGNoYXJbc3RybGVuKG4pKzFdOyBcblx0XHRzdHJjcHkodGhpcy0bnVtZSxuKTsgXG5cdFx0Y291dDw8XCJDb25zdHJ1Y3RvclwiPDxlbmRsO30gXG5cdFBlcnNvYW5hKFBlcnNvYW5hJiBwKXsgXG5cdFx0dGhpcy0dmFyc3RhID0gcC52YXJzdGE7IFxuXHRcdHRoaXMtPm51bWUgPSBuZXcgY2hhcltzdHJsZW4ocC5udW1lKSsxXTsgXG5cdFx0c3RyY3B5KHRoaXMtPm51bWUsIHAubnVtZSk7IFxuXHRcdGNvdXQ8PFwiQ29uc3RydWN0b3IgZGUgY29waWVyZVwiPDxlbmRsO30gXG5cdHZvaWQgb3BlcmF0b3I9KFBlcnNvYW5hJiBwKXsgXG5cdFx0dGhpcy0dmFyc3RhID0gcC52YXJzdGE7IFxuXHRcdGRlbGV0ZVtdIHRoaXMtPm51bWU7IFxuXHRcdHRoaXMtPm51bWUgPSBuZXcgY2hhcltzdHJsZW4ocC5udW1lKSsxXTsgXG5cdFx0c3RyY3B5KHRoaXMtPm51bWUsIHAubnVtZSk7IFxuXHRcdGNvdXQ8PFwiT3BlcmF0b3I9XCI8PGVuZGw7fSBcblx0UGVyc29hbmEoKXsgY291dDw8XCJEZXN0cnVjdG9yXCI8PGVuZGw7fX07IFxuaW50IG1haW4oKSBcbnsgXG5cdFBlcnNvYW5hIHAxLCBwMigyMCwgXCJHaWdlbFwiKTsgXG5cdFBlcnNvYW5hIHAzID0gcDE7IFxuXHRwMyA9IHAyOyBcblx0UGVyc29hbmEgcDQgPSBwMTsgXG59IFxuU3VudCBhcGVsYXRlIHVybcOjdG9hcmVsZTogIiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiY29uc3RydWN0b3Ig4oCTIGRlIHBhdHJ1IG9yaSwgY29uc3RydWN0b3IgZGUgY29waWVyZSDigJMgbyBkYXTDoywgZGVzdHJ1Y3RvciDigJMgZGUgcGF0cnUgb3JpOyIsCiAgICAgICJjb25zdHJ1Y3RvciDigJMgZGUgdHJlaSBvcmksIGNvbnN0cnVjdG9yIGRlIGNvcGllcmUgLSBkZSBkb3XDoyBvcmksIGRlc3RydWN0b3IgZGUgY2luY2kgb3JpOyIsCiAgICAgICJjb25zdHJ1Y3RvciDigJMgZGUgZG91w6Mgb3JpLCBjb25zdHJ1Y3RvciBkZSBjb3BpZXJlIOKAkyBkZSBkb3XDoyBvcmksIG9wZXJhdG9yPSAtIG8gZGF0w6MsIiwKICAgICAgImNvbnN0cnVjdG9yIOKAkyBkZSBkb3XDoyBvcmksIGNvbnN0cnVjdG9yIGRlIGNvcGllcmUg4oCTIG8gZGF0w6MsIG9wZXJhdG9yPSAtIGRlIGRvdcOjIG9yaSwiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlByZXN1cHVuZW0gY8SDIMOubiBDKysgY2xhc2EgQSBlc3RlIHByaWV0ZW7EgyBjdSBjbGFzYSBCLCBpYXIgY2xhc2EgQiBlc3RlIHByaWV0ZW7EgyBjdSBjbGFzYSBDLiBDYXJlIGRpbnRyZSB1cm3Eg3RvYXJlbGUgYWZpcm1hyJtpaSBlc3RlIGFkZXbEg3JhdMSDPyIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkNsYXNhIEMgZGV2aW5lIGF1dG9tYXQgcHJpZXRlbsSDIGN1IGNsYXNhIEEuIiwKICAgICAgIkNsYXNhIEIgbnUgcG9hdGUgZmkgcHJpZXRlbsSDIGN1IG5pY2lvIGFsdMSDIGNsYXPEgyDDrm4gYWZhcmEgY2xhc2VpIEEuIiwKICAgICAgIkNsYXNhIEEgZGV2aW5lIGF1dG9tYXQgcHJpZXRlbsSDIGN1IGNsYXNhIEMiLAogICAgICAiUmVsYcibaWEgZGUgcHJpZXRlbmllIG51IGVzdGUgdHJhbnppdGl2xIMsIHByaW4gdXJtYXJlIGNsYXNhIEEgbnUgZXN0ZSBwcmlldGVuxIMgY2xhc2VpIEMuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJTZSBjb25zaWRlcsSDIHByb2dyYW11bCB1cm3Eg3RvciBDKys6XG4jaW5jbHVkZTxpb3N0cmVhbS5oPiBcbmludCBpOyBcbmNsYXNzIEFcbntcbnB1YmxpYzogXG5cdEEoKXtpPTEwO319OyBcbmludCBmb28oKXsgaT0zOyBcblx0QSBvYjsgXG5cdHJldHVybiBpO1xuIH0gXG5pbnQgbWFpbigpXG57IFxuXHRjb3V0IDw8IGZvbygpIDw8IGVuZGw7IFxuXHRyZXR1cm4gMDtcbn1cblByb2dyYW11bCB1cm3Eg3RvciBhZmnImWVhesSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjMiLAogICAgICAiMiIsCiAgICAgICIxIiwKICAgICAgIjAiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlBlbnRydSBjYSBzZWN2ZW7Im2EgZGUgbWFpIGpvcyBzxIMgc2UgZXhlY3V0ZSBmxINyxIMgZXJvcmksIHByZWNpemHIm2kgY2FyZSBkaW50cmUgaW1wbGVtZW50xINyaWxlIEMrKyBkZSBtYWkgam9zLCBhbGUgdW51aSBvcGVyYXRvciBkZS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,
}

enum Retele {
  ,
}

enum Sgbd {
  ,
}

enum So {
  ,
}

enum Tap {
  WwogIHsKICAgICJxdWVzdGlvbiI6ICJDb21wbGV4aXRhdGVhIG1pbmltxIMgYSB1bnVpIGFsZ29yaXRtIGNhcmUgY2FsY3VsZWF6xIMgbnVtxINydWwgdHV0dXJvciBzdWJtdWzIm2ltaWxvciB1bmVpIG11bMibaW1pIGN1IPCdkZsgZWxlbWVudGUgZXN0ZToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICLwnZKqKPCdkZvCsikiLAogICAgICAi8J2Sqigy4oGKSIsCiAgICAgICLwnZKqKPCdkZspIiwKICAgICAgIvCdkqoo8J2RmyEpIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICLDjm4gQXVsYSBNYWduYSBhIFVuaXZlcnNpdMSDyJtpaSBUaXR1IE1haW9yZXNjdSBkaW4gQnVjdXJlyJl0aSBzZSB2YSBvcmdhbml6YSB1biBmZXN0aXZhbCBkZSB0ZWF0cnUgY2FyZSB2YSBkdXJhIG8gc2luZ3VyxIMgemkuIEZpZWNhcmUgcmVnaXpvciBhIHRyYW5zbWlzIG9yZ2FuaXphdG9ydWx1aSBmZXN0aXZhbHVsdWkgaW50ZXJ2YWx1bCBkZSB0aW1wIMOubiBjYXJlIHNlIHBvYXRlIGRlc2bEg8iZdXJhIHNwZWN0YWNvbHVsIHPEg3UuIE9yZ2FuaXphdG9ydWwgZmVzdGl2YWx1bHVpIGRvcmXImXRlIHPEgyBwcm9ncmFtZXplIHVuIG51bcSDciBtYXhpbSBkZSBzcGVjdGFjb2xlLiDImHRpaW5kIGPEgyBzcGVjdGFjb2xlbGUgbnUgc2UgcG90IHN1cHJhcHVuZSDImWkgY8SDIMOubnRyZSBvcmljYXJlIGRvdcSDIHNwZWN0YWNvbGUgY29uc2VjdXRpdmUgbnUgZXhpc3TEgyBuaWNpbyBwYXV6xIMsIHN0YWJpbGnIm2kgY2FyZSBkaW50cmUgc3RyYXRlZ2lpbGUgZGUgcGxhbmlmaWNhcmUgZGUgdGlwIEdyZWVkeSBkZSBtYWkgam9zIHBvdCBmaSBmb2xvc2l0ZSBkZSBjxIN0cmUgb3JnYW5pemF0b3J1bCBmZXN0aXZhbHVsdWkgcGVudHJ1IGEgcGxhbmlmaWNhIHVuIG51bcSDciBtYXhpbSBkZSBzcGVjdGFjb2xlIMOubiBBdWxhIE1hZ25hIMOubiB6aXVhIHJlc3BlY3RpdsSDOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgInNlIHNvcnRlYXrEgyBzcGVjdGFjb2xlbGUgw65uIG9yZGluZWEgY3Jlc2PEg3RvYXJlIGEgb3JlbG9yIGxhIGNhcmUgc2UgdGVybWluxIMsIHNlIHByb2dyYW1lYXrEgyBwcmltdWwgc3BlY3RhY29sIMiZaSBhcG9pIHNlIGNvbnNpZGVyxIMsIHBlIHLDom5kLCByZXN0dWwgc3BlY3RhY29sZWxvciwgdW4gc3BlY3RhY29sIGZpaW5kIHByb2dyYW1hdCBkb2FyIGRhY8SDIMOubmNlcGUgZHVwxIMgY2Ugc2UgdGVybWluxIMgc3BlY3RhY29sdWwgcHJvZ3JhbWF0IGFudGVyaW9yOyIsCiAgICAgICJzZSBzb3J0ZWF6xIMgc3BlY3RhY29sZWxlIMOubiBvcmRpbmVhIGNyZXNjxIN0b2FyZSBhIGR1cmF0ZWkgbG9yLCBzZSBwcm9ncmFtZWF6xIMgcHJpbXVsIHNwZWN0YWNvbCDImWkgYXBvaSBzZSBjb25zaWRlcsSDLCBwZSByw6JuZCwgcmVzdHVsIHNwZWN0YWNvbGVsb3IsIHVuIHNwZWN0YWNvbCBmaWluZCBwcm9ncmFtYXQgZG9hciBkYWPEgyDDrm5jZXBlIGR1cMSDIGNlIHNlIHRlcm1pbsSDIHNwZWN0YWNvbHVsIHByb2dyYW1hdCBhbnRlcmlvcjsiLAogICAgICAic2Ugc29ydGVhesSDIHNwZWN0YWNvbGVsZSDDrm4gb3JkaW5lYSBjcmVzY8SDdG9hcmUgYSBvcmVsb3IgbGEgY2FyZSDDrm5jZXAsIHNlIHByb2dyYW1lYXrEgyBwcmltdWwgc3BlY3RhY29sIMiZaSBhcG9pIHNlIGNvbnNpZGVyxIMsIHBlIHLDom5kLCByZXN0dWwgc3BlY3RhY29sZWxvciwgdW4gc3BlY3RhY29sIGZpaW5kIHByb2dyYW1hdCBkb2FyIGRhY8SDIMOubmNlcGUgZHVwxIMgY2Ugc2UgdGVybWluxIMgc3BlY3RhY29sdWwgcHJvZ3JhbWF0IGFudGVyaW9yOyIsCiAgICAgICJzZSBzb3J0ZWF6xIMgc3BlY3RhY29sZWxlIMOubiBvcmRpbmVhIGRlc2NyZXNjxIN0b2FyZSBhIG9yZWxvciBsYSBjYXJlIHNlIHRlcm1pbsSDLCBzZSBwcm9ncmFtZWF6xIMgcHJpbXVsIHNwZWN0YWNvbCDImWkgYXBvaSBzZSBjb25zaWRlcsSDLCBwZSByw6JuZCwgcmVzdHVsIHNwZWN0YWNvbGVsb3IsIHVuIHNwZWN0YWNvbCBmaWluZCBwcm9ncmFtYXQgZG9hciBkYWPEgyDDrm5jZXBlIGR1cMSDIGNlIHNlIHRlcm1pbsSDIHNwZWN0YWNvbHVsIHByb2dyYW1hdCBhbnRlcmlvci4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIsOObiBBdWxhIE1hZ25hIGEgVW5pdmVyc2l0xIPIm2lpIFRpdHUgTWFpb3Jlc2N1IGRpbiBCdWN1cmXImXRpIHNlIHZhIG9yZ2FuaXphIHVuIGZlc3RpdmFsIGRlIHRlYXRydSBjYXJlIHZhIGR1cmEgbyBzaW5ndXLEgyB6aS4gRmllY2FyZSByZWdpem9yIGEgdHJhbnNtaXMgb3JnYW5pemF0b3J1bHVpIGZlc3RpdmFsdWx1aSBpbnRlcnZhbHVsIGRlIHRpbXAgWKEjuKEjjE6IPCdkZrwnZGaMSwg4oSO4oSOMjog8J2RmvCdkZoyXSDDrm4gY2FyZSBzZSBwb2F0ZSBkZXNmxIPImXVyYSBzcGVjdGFjb2x1bCBzxIN1LiDImHRpaW5kIGPEgyBzcGVjdGFjb2xlbGUgbnUgc2UgcG90IHN1cHJhcHVuZSDImWkgw65udHJlIG9yaWNhcmUgZG91xIMgc3BlY3RhY29sZSBjb25zZWN1dGl2ZSBudSBleGlzdMSDIG5pY2lvIHBhdXrEgywgb3JnYW5pemF0b3J1bCBmZXN0aXZhbHVsdWkgcy1hIGfDom5kaXQgc8SDIGZvbG9zZWFzY8SDIG8gc3RyYXRlZ2llIGRlIHBsYW5pZmljYXJlIGRlIHRpcCBHcmVlZHkgcGVudHJ1IGEgcGxhbmlmaWNhIHVuIG51bcSDciBtYXhpbSBkZSBzcGVjdGFjb2xlIMOubiBjYWRydWwgZmVzdGl2YWx1bHVpLiBDb25zaWRlcsOibmQgY8SDIDcgcmVnaXpvcmkgYXUgdHJpbWlzIGludGVydmFsZWxlIGRlIGRlc2bEg8WfdXJhcmUgYWxlIHNwZWN0YWNvbGVsb3IgbG9yIPCdkaAxID0gWzA4OiAwMCwxMDogMzBdLCDwnZGgMiA9IFswODogMzAsMDk6IDAwXSwg8J2RoDMgPSBbMTY6IDMwLDE4OiAwMF0sIPCdkaA0ID0gWzEwOiAzMCwxMDogNDVdLCDwnZGgNSA9IFsxMTogMDAsMTc6IDAwXSwg8J2RoDYgPSBbMTE6IDMwLDEzOiAwMF0sIPCdkaA3ID0gWzE1OiAxNSwxNjogNDVdLCBwcmVjaXphyJtpIGNhcmUgZGludHJlIHZhcmlhbnRlbGUgZGUgbWFpIGpvcyByZXByZXppbnTEgyBvIHBsYW5pZmljYXJlIGNvcmVjdMSDLCBjdSB1biBudW3Eg3IgbWF4aW0gZGUgc3BlY3RhY29sZToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJTMSwgUzIsIFM0LCBTNSwgUzYiLAogICAgICAiUzIsIFM0LCBTNiwgUzciLAogICAgICAiUzEsIFM2LCBTNywgUzMiLAogICAgICAiUzEsIFM1IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICLDjm4gQXVsYSBNYWduYSBhIFVuaXZlcnNpdMSDyJtpaSBUaXR1IE1haW9yZXNjdSBkaW4gQnVjdXJlyJl0aSBzZSB2YSBvcmdhbml6YSB1biBmZXN0aXZhbCBkZSB0ZWF0cnUgY2FyZSB2YSBkdXJhIG8gc2luZ3VyxIMgemkuIEZpZWNhcmUgcmVnaXpvciBhIHRyYW5zbWlzIG9yZ2FuaXphdG9ydWx1aSBmZXN0aXZhbHVsdWkgaW50ZXJ2YWx1bCBkZSB0aW1wIFvihI7ihI4xOiDwnZGa8J2RmjEsIOKEjuKEjjI6IPCdkZrwnZGaMl0gw65uIGNhcmUgc2UgcG9hdGUgZGVzZsSDyJl1cmEgc3BlY3RhY29sdWwgc8SDdS4gyJh0aWluZCBjxIMgc3BlY3RhY29sZWxlIG51IHNlIHBvdCBzdXByYXB1bmUgyJlpIMOubnRyZSBvcmljYXJlIGRvdcSDIHNwZWN0YWNvbGUgY29uc2VjdXRpdmUgbnUgZXhpc3TEgyBuaWNpbyBwYXV6xIMsIG9yZ2FuaXphdG9ydWwgZmVzdGl2YWx1bHVpIHMtYSBnw6JuZGl0IHPEgyBmb2xvc2Vhc2PEgyBvIHN0cmF0ZWdpZSBkZSBwbGFuaWZpY2FyZSBkZSB0aXAgR3JlZWR5IHBlbnRydSBhIHBsYW5pZmljYSB1biBudW3Eg3IgbWF4aW0gZGUgc3BlY3RhY29sZSDDrm4gY2FkcnVsIGZlc3RpdmFsdWx1aS4gQ29uc2lkZXLDom5kIGPEgyA3IHJlZ2l6b3JpIGF1IHRyaW1pcyBpbnRlcnZhbGVsZSBkZSBkZXNmxIPFn3VyYXJlIGFsZSBzcGVjdGFjb2xlbG9yIGxvciDwnZGgMSA9IFswODogMDAsMTA6IDMwXSwg8J2RoDIgPSBbMDg6IDMwLDExOiAwMF0sIPCdkaAzID0gWzE2OiAzMCwxODogMDBdLCDwnZGgNCA9IFsxMDogMzAsMTA6IDQ1XSwg8J2RoDUgPSBbMTE6IDAwLDEyOiAwMF0sIPCdkaA2ID0gWzEyOiAzMCwxNjogMDBdLCDwnZGgNyA9IFsxNzogMTUsMTg6IDQ1XSwgcHJlY2l6YcibaSBjYXJlIGRpbnRyZSB2YXJpYW50ZWxlIGRlIG1haSBqb3MgcmVwcmV6aW50xIMgbyBwbGFuaWZpY2FyZSBjb3JlY3TEgywgY3UgdW4gbnVtxINyIG1heGltIGRlIHNwZWN0YWNvbGU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiUzEsIFM1LCBTNiwgUzMiLAogICAgICAiUzIsIFM0LCBTNSwgUzYsIFM3IiwKICAgICAgIlMyLCBTNSwgUzYsIFMzLCBTNyIsCiAgICAgICJTMSwgUzQsIFM1LCBTNiwgUzciCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlNlIGNvbnNpZGVyxIMgdW4gdHJpdW5naGkgZGUgbnVtZXJlIMOubnRyZWdpIGZvcm1hdCBkaW4g8J2RmyBsaW5paSwgYXN0ZmVsOiBwcmltYSBsaW5pZSBjb27Im2luZSB1biBudW3Eg3IsIGEgZG91YSBsaW5pZSBjb27Im2luZSBkb3XEgyBudW1lcmUsLiAuIC4sIHVsdGltYSBsaW5pZSBjb27Im2luZSDwnZGbIG51bWVyZS4gw45uIGFjZXN0IHRyaXVuZ2hpIHNlIHBvdCBmb3JtYSBzdW1lIGRlIG51bWVyZSDDrm50cmVnaSDDrm4gZmVsdWwgdXJtxIN0b3I6XG7inqIgc2Ugc2VsZWN0ZWF6xIMgbnVtxINydWwgYWZsYXQgcGUgcHJpbWEgbGluaWU7XG7inqIgbGEgZmllY2FyZSBwYXMgc2Ugc2VsZWN0ZWF6xIMgZmllIG51bcSDcnVsIGFmbGF0IHBlIHVybcSDdG9hcmVhIGxpbmllIHN1YiB1bHRpbXVsIG51bcSDciBzZWxlY3RhdCwgZmllIG51bcSDcnVsIGFmbGF0IHBlIHVybcSDdG9hcmVhIGxpbmllIMiZaSBvIGNvbG9hbsSDIGxhIGRyZWFwdGEgZmHIm8SDIGRlIHVsdGltdWwgbnVtxINyIHNlbGVjdGF0LCBww6JuxIMgY8OibmQgc2UgYWp1bmdlIHBlIHVsdGltYSBsaW5pZSBhIHRyaXVuZ2hpdWx1aSBkZSBudW1lcmUuXG5VbiBhbGdvcml0bSBjdSBjb21wbGV4aXRhdGUgbWluaW3EgyBjYXJlIGRldGVybWluxIMgY2VhIG1haSBtYXJlIHN1bcSDIGNlIHNlIHBvYXRlIG9iyJtpbmUgcmVzcGVjdMOibmQgcmVndWxpbGUgZGUgbWFpIHN1cyBmb2xvc2XImXRlIG1ldG9kYToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJHcmVlZHk7IiwKICAgICAgImJhY2t0cmFja2luZzsiLAogICAgICAicHJvZ3JhbcSDcmlpIGRpbmFtaWNlOyIsCiAgICAgICJEaXZpZGUgZXQgSW1wZXJhLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAyCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiU2UgY29uc2lkZXLEgyB1cm3Eg3RvcnVsIHRyaXVuZ2hpIGRlIG51bWVyZSDDrm50cmVnaSBmb3JtYXQgZGluIPCdkZsgPSA0IGxpbmlpOiBcbjEwXG4xMiDiiJIyMFxuMzAgNTAgMTgwXG4yMSAxNCAyMCAxNlxuw45uIGFjZXN0IHRyaXVuZ2hpIHNlIHBvdCBmb3JtYSBzdW1lIGRlIG51bWVyZSDDrm50cmVnaSDDrm4gZmVsdWwgdXJtxIN0b3I6IFxu4p6iIHNlIHNlbGVjdGVhesSDIG51bcSDcnVsIGFmbGF0IHBlIHByaW1hIGxpbmllO1xu4p6iIGxhIGZpZWNhcmUgcGFzIHNlIHNlbGVjdGVhesSDIGZpZSBudW3Eg3J1bCBhZmxhdCBwZSB1cm3Eg3RvYXJlYSBsaW5pZSBzdWIgdWx0aW11bCBudW3Eg3Igc2VsZWN0YXQsIGZpZSBudW3Eg3J1bCBhZmxhdCBwZSB1cm3Eg3RvYXJlYSBsaW5pZSDImWkgbyBjb2xvYW7EgyBsYSBkcmVhcHRhIGZhyJvEgyBkZSB1bHRpbXVsIG51bcSDciBzZWxlY3RhdCwgcMOibsSDIGPDom5kIHNlIGFqdW5nZSBwZSB1bHRpbWEgbGluaWUgYSB0cml1bmdoaXVsdWkgZGUgbnVtZXJlLlxuQ2FyZSBlc3RlIHN1bWEgbWF4aW3EgyBjZSBwb2F0ZSBmaSBvYsibaW51dMSDIMOubiB0cml1bmdoaXVsIGRhdCwgcmVzcGVjdMOibmQgY29uZGnIm2lpbGUgcHJlY2l6YXRlIG1haSBzdXMIiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiMTkwIiwKICAgICAgIjczIiwKICAgICAgIjkyIiwKICAgICAgIjMwMiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAwCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiU2UgY29uc2lkZXLEgyB1cm3Eg3RvcnVsIHRyaXVuZ2hpIGRlIG51bWVyZSDDrm50cmVnaSBmb3JtYXQgZGluIPCdkZsgPSA0IGxpbmlpOiBcbjEwMFxu4oiSMTIg4oiSMjBcbjEzMCAyMDAgMTE4XG4yMTAgMTE0IDMyMCAxNjBcbsOObiBhY2VzdCB0cml1bmdoaSBzZSBwb3QgZm9ybWEgc3VtZSBkZSBudW1lcmUgw65udHJlZ2kgw65uIGZlbHVsIHVybcSDdG9yOiBcbuKeoiBzZSBzZWxlY3RlYXrEgyBudW3Eg3J1bCBhZmxhdCBwZSBwcmltYSBsaW5pZTtcbuKeoiBsYSBmaWVjYXJlIHBhcyBzZSBzZWxlY3RlYXrEgyBmaWUgbnVtxINydWwgYWZsYXQgcGUgdXJtxIN0b2FyZWEgbGluaWUgc3ViIHVsdGltdWwgbnVtxINyIHNlbGVjdGF0LCBmaWUgbnVtxINydWwgYWZsYXQgcGUgdXJtxIN0b2FyZWEgbGluaWUgyJlpIG8gY29sb2FuxIMgbGEgZHJlYXB0YSBmYcibxIMgZGUgdWx0aW11bCBudW3Eg3Igc2VsZWN0YXQsIHDDom7EgyBjw6JuZCBzZSBhanVuZ2UgcGUgdWx0aW1hIGxpbmllIGEgdHJpdW5naGl1bHVpIGRlIG51bWVyZS5cbkNhcmUgZXN0ZSBzdW1hIG1heGltxIMgY2UgcG9hdGUgZmkgb2LIm2ludXTEgyDDrm4gdHJpdW5naGl1bCBkYXQsIHJlc3BlY3TDom5kIGNvbmRpyJtpaWxlIHByZWNpemF0ZSBtYWkgc3VzPyIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjUxOCIsCiAgICAgICI0MDIiLAogICAgICAiNDI4IiwKICAgICAgIjYwOCIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIPCdkYYgbyBzdW3EgyBkZSBiYW5pIMWfaSDwnZGj4oKBLCDwnZGj4oKCLCDigKYgLCDwnZGj4oKZIHZhbG9yaWxlIGEgbiB0aXB1cmkgZGUgbW9uZWRlIChzZSBwcmVzdXB1bmUgY8SDIGRpbiBmaWVjYXJlIHRpcCBkZSBtb25lZMSDIGF2ZW0gbGEgZGlzcG96acWjaWUgdW4gbnVtxINyIG5lbGltaXRhdCBkZSBtb25lZGUpLiBVbiBhbGdvcml0bSBvcHRpbSBjYXJlIHPEgyBkZXRlcm1pbmUgbnVtxINydWwgbWluaW0gZGUgbW9uZWRlIGN1IGNhcmUgcG9hdGUgZmkgcGzEg3RpdMSDIHN1bWEg8J2RhiwgZm9sb3NpbmQgbW9uZWRlIGRlIHRpcHVyaWxlIGRhdGUsIGZvbG9zZciZdGUgbWV0b2RhOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIkdyZWVkeTsiLAogICAgICAiYmFja3RyYWNraW5nOyIsCiAgICAgICJwcm9ncmFtxINyaWkgZGluYW1pY2U7IiwKICAgICAgIkRpdmlkZSBldCBJbXBlcmEuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJQcmVjaXphyJtpIGPDonRlIHN1YsiZaXJ1cmkgc3RyaWN0IGNyZXNjxIN0b2FyZSBkZSBsdW5naW1lIG1heGltxIMgY29uyJtpbmUgdGFibG91bCDwnZGjID0gKDEyLDE4LDE3LDExLDEwLDE2LDE3LDI2KToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIxIiwKICAgICAgIjIiLAogICAgICAiMyIsCiAgICAgICI0IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJQcmVjaXphyJtpIGPDonRlIHN1YsiZaXJ1cmkgc3RyaWN0IGNyZXNjxIN0b2FyZSBkZSBsdW5naW1lIG1heGltxIMgY29uyJtpbmUgdGFibG91bCDwnZGjID0gKDIxLDE4LDEzLDE5LDIxLDE2LDE2LDE3LDI2KToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIxIiwKICAgICAgIjIiLAogICAgICAiMyIsCiAgICAgICI0IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJJbmRpY2HIm2kgbHVuZ2ltZWEgbWF4aW3EgyBhIHVudWkgc3ViyJlpciBzdHJpY3QgY3Jlc2PEg3RvciBkaW4gdGFibG91bCDwnZGjID0gKDEyLDE4LDE3LDExLDEwLDI2LDE3LDI2LDE5LDI4KToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIyIiwKICAgICAgIjQiLAogICAgICAiMyIsCiAgICAgICI1IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDEKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJJbmRpY2HIm2kgbHVuZ2ltZWEgbWF4aW3EgyBhIHVudWkgc3ViyJlpciBzdHJpY3QgY3Jlc2PEg3RvciBkaW4gdGFibG91bCDwnZGjID0gKDE4LDE0LDUsNCw4LDE1LDEyLDE5LDE2LDIyKToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICIyIiwKICAgICAgIjQiLAogICAgICAiMyIsCiAgICAgICI1IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJBdsOibmQgbGEgZGlzcG96acibaWUgdW4gbnVtxINyIG5lbGltaXRhdCBkZSBtb25lZGUgY3UgdmFsb3JpbGUgNSBST04sIDQgUk9OLCAzIFJPTiDImWkgMSBST04sIHByZWNpemHIm2kgbnVtxINydWwgbWluaW0gZGUgbW9uZWRlIGN1IGNhcmUgcG9hdGUgZmkgcGzEg3RpdMSDIHN1bWEgZGUgMTcgUk9OOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjQiLAogICAgICAiNSIsCiAgICAgICIzIiwKICAgICAgIjYiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkF2w6JuZCBsYSBkaXNwb3ppyJtpZSB1biBudW3Eg3IgbmVsaW1pdGF0IGRlIG1vbmVkZSBjdSB2YWxvcmlsZSA3IFJPTiwgNiBST04sIDMgUk9OIMiZaSAyIFJPTiwgcHJlY2l6YcibaSBudW3Eg3J1bCBtaW5pbSBkZSBtb25lZGUgY3UgY2FyZSBwb2F0ZSBmaSBwbMSDdGl0xIMgc3VtYSBkZSAxOSBST046IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiNiIsCiAgICAgICIzIiwKICAgICAgIjQiLAogICAgICAiNSIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQ29tcGxleGl0YXRlYSBtaW5pbcSDIGEgdW51aSBhbGdvcml0bSBjYXJlIGFmacWfZWF6xIMgdG9hdGUgc3VibXVsyJtpbWlsZSB1bmVpIG11bMibaW1pIGN1IPCdkZsgZWxlbWVudGUgZXN0ZToiLAogICAgImFuc3dlcnMiOiB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xaNlbG9yIHN0cmljdCBjcmVzY8SDdG9hcmUgZGluIHRhYmxvdWwg8J2RjjsiLAogICAgICAibHVuZ2ltZWEgbWF4aW3EgyBhIHVudWkgc3VixZ9pciBkaW4gdGFibG91bCDwnZGOIGZvcm1hdCBkaW4gdmFsb3JpIGVnYWxlLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAwCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiU2UgY29uc2lkZXLEgyB1cm3Eg3RvYXJlYSBmdW5jxaNpZSByZWN1cnNpdsSDLCBzY3Jpc8SDIMOubiBsaW1iYWp1bCBDOlxuaW50IEYoaW50IG4pXG57IFxuXHRpZiAobj09MCkgcmV0dXJuIDA7IFxuXHRlbHNlIFxuXHQgaWYgKChuJTEwKT5GKG4vMTApKSByZXR1cm4gbiUxMDtcblx0IGVsc2UgcmV0dXJuIEYobi8xMCk7IFxufVxuXG5DZSB2YWxvYXJlIHZhIHJldHVybmEgZnVuY8ibaWEgZHVwxIMgYXBlbHVsIPCdkLkoMzg0MjMpPyIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjMiLAogICAgICAiMiIsCiAgICAgICI4IiwKICAgICAgIjQiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlNlIGNvbnNpZGVyxIMgdXJtxIN0b3J1bCBwcm9ncmFtIMOubiBsaW1iYWp1bCBDOlxuI2luY2x1ZGU8c3RkaW8uaD5cbmludCBGKGludCB2W10saW50IG4pIFxueyBcblx0aWYobj09MCkgcmV0dXJuIHZbMF07IFxuXHRlbHNlIFxuXHRpZih2W25dPDApIHJldHVybiBGKHYsbi0xKTsgXG5cdGVsc2UgcmV0dXJuIHZbbl0rRih2LG4tMSk7IFxufSBcblxuaW50IG1haW4oKVxue1xuXHRpbnQgaSx2WzEwXTtcblx0Zm9yKGk9MDtpPDEwO2krKylcblx0XHRpZihpJTI9PTApIHZbaV09aTtcblx0XHRlbHNlIHZbaV09LWk7XG5cdHByaW50ZihcIiVkXCIsRih2LDkpKTtcblx0cmV0dXJuIDA7XG59XG5cbkNlIGFmacWfZWF6xIMgcHJvZ3JhbXVsIGRlIG1haSBzdXMIiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiLTIwIiwKICAgICAgIjAiLAogICAgICAiMjAiLAogICAgICAiLTUiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlNlIGNvbnNpZGVyxIMgdXJtxIN0b2FyZWEgZnVuY8WjaWUgcmVjdXJzaXbEgywgc2NyaXPEgyDDrm4gbGltYmFqdWwgQzpcbmludCBmKGludCBuKVxueyBcblx0aWYgKG49PTApIHJldHVybiAxOyBcblx0ZWxzZSByZXR1cm4oKChuJTEwKSUyID09IDApICYmIChmKG4vMTApIT0wKSk7XG59XG5cbkNlIHZhbG9hcmUgdmEgcmV0dXJuYSBmdW5jyJtpYSBkdXDEgyBhcGVsdWwg8J2Rkyg2OTA0KT8iLAogICAgImFuc3dlcnMiOiBbCiAgICAgICI0IiwKICAgICAgIjYiLAogICAgICAiOSIsCiAgICAgICIwIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDMKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJTZSBjb25zaWRlcsSDIHVybcSDdG9hcmVhIGZ1bmPFo2llIHJlY3Vyc2l2xIMsIHNjcmlzxIMgw65uIGxpbWJhanVsIEM6XG5pbnQgZihpbnQgeClcbntcblx0aWYoeD09MCkgcmV0dXJuIDA7XG5cdCBlbHNlIHJldHVybiAoZih4LTEpKzMqeC0xKTtcbn1cblxuUGVudHJ1IGNlIHZhbG9hcmUgYSBwYXJhbWV0cnVsdWkg8J2RpSBmdW5jyJtpYSDwnZGTIHZhIMOubnRvYXJjZSB2YWxvYXJlYSA1Nz8iLAogICAgImFuc3dlcnMiOiBbCiAgICAgICI1IiwKICAgICAgIjYiLAogICAgICAiOCIsCiAgICAgICIxMCIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiU2UgY29uc2lkZXLEgyB1cm3Eg3RvYXJlYSBmdW5jxaNpZSByZWN1cnNpdsSDLCBzY3Jpc8SDIMOubiBsaW1iYWp1bCBDOlxuaW50IHAoaW50IG4saW50IHgpXG57XG5cdCBpZih4PT1uKSByZXR1cm4gMTtcblx0IGVsc2Vcblx0IGlmKG4leD09MCkgcmV0dXJuIDA7XG5cdCBlbHNlIHJldHVybiBwKG4seCsxKTtcbn1cblxuw45uIHVybWEgYXBlbHVsdWkg8J2RnSjwnZGbLCAyKSBmdW5jyJtpYSB2YSDDrm50b2FyY2UgdmFsb2FyZWEgMSBkYWPEgyDImWkgbnVtYWkgZGFjxIM6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAibnVtxINydWwgbmF0dXJhbCDwnZGbIGVzdGUgcGFyOyIsCiAgICAgICJudW3Eg3J1bCBuYXR1cmFsIPCdkZsgZXN0ZSBwcmltOyIsCiAgICAgICJudW3Eg3J1bCBuYXR1cmFsIPCdkZsgbnUgZXN0ZSBwcmltOyIsCiAgICAgICJudW3Eg3J1bCBuYXR1cmFsIPCdkZsgZXN0ZSBpbXBhci4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkluZGljYcWjaSBjYXJlIGRpbnRyZSB1cm3Eg3RvcmlpIGFsZ29yaXRtaSBudSBzZSBiYXplYXrEgyBwZSB0ZWhuaWNhIGRlIHByb2dyYW1hcmUgRGl2aWRlIGV0IEltcGVyYToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJzb3J0YXJlYSByYXBpZMSDOyIsCiAgICAgICJjxIN1dGFyZWEgYmluYXLEgzsiLAogICAgICAic29ydGFyZWEgcHJpbiBpbnRlcmNsYXNhcmU7IiwKICAgICAgInNvcnRhcmVhIHByaW4gbnVtxINyYXJlLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiU3RhYmlsacibaSBjYXJlIGRpbnRyZSB1cm3Eg3RvYXJlbGUgbWV0b2RlIGRlIHNvcnRhcmUgc2UgYmF6ZWF6xIMgcGUgdGVobmljYSBkZSBwcm9ncmFtYXJlIERpdmlkZSBldCBJbXBlcmE6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiQnViYmxlc29ydDsiLAogICAgICAic29ydGFyZWEgcHJpbiBzZWxlY8ibaWEgbWluaW11bHVpOyIsCiAgICAgICJzb3J0YXJlYSBwcmluIGludGVyY2xhc2FyZTsiLAogICAgICAic29ydGFyZWEgcHJpbiBudW3Eg3JhcmUuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJJbmRpY2HFo2kgY2FyZSBkaW50cmUgdXJtxIN0b2FyZWxlIG1ldG9kZSBkZSBzb3J0YXJlIG51IGFyZSBjb21wbGV4aXRhdGVhIPCdkqoo8J2RmyBsb2figoIg8J2Rmyk6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAic29ydGFyZWEgcmFwaWTEgzsiLAogICAgICAic29ydGFyZWEgY3UgYW5zYW1ibGU7IiwKICAgICAgInNvcnRhcmVhIHByaW4gaW50ZXJjbGFzYXJlOyIsCiAgICAgICJzb3J0YXJlYSBwcmluIG51bcSDcmFyZS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkNvbnNpZGVyxINtIHVybcSDdG9hcmVsZSBkb3XEgyBmdW5jyJtpaSBzY3Jpc2Ugw65uIGxpbWJhanVsIEM6XG5pbnQgYVsxMDBdO1xuaW50IG1heChpbnQgeCxpbnQgeSlcbntcblx0aWYoeD55KSByZXR1cm4geDtcblx0ZWxzZSByZXR1cm4geTtcbn1cbmludCBGKGludCBwLCBpbnQgdSlcbntcblx0aWYocD09dSkgcmV0dXJuIGFbcF07XG5cdGVsc2Vcblx0e1xuXHRcdGludCBtPShwK3UpLzI7XG5cdFx0cmV0dXJuIG1heChGKHAsbSksRihtKzEsdSkpO1xuXHR9XG59XG5cbsWedGlpbmQgY8SDIHRhYmxvdWwgYSBlc3RlIGZvcm1hdCBkaW4gbiBudW1lcmUgbmF0dXJhbGUgbmVudWxlLCBpYXIgYXBlbHVsIHN1YnByb2dyYW11bHVpIHZhIGZpIPCdkLkoMCwg8J2RmyDiiJIgMSksIHByZWNpemHIm2kgdGVobmljYSBkZSBwcm9ncmFtYXJlIHV0aWxpemF0xIMgw65uIGNhZHJ1bCBmdW5jyJtpZWkg8J2QuToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJHcmVlZHk7IiwKICAgICAgImJhY2t0cmFja2luZzsiLAogICAgICAicHJvZ3JhbWFyZWEgZGluYW1pY8SDOyIsCiAgICAgICJEaXZpZGUgZXQgSW1wZXJhLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIPCdkaMgdW4gdGFibG91IHVuaWRpbWVuc2lvbmFsIGZvcm1hdCBkaW4gMTAwMDAwMCBkZSBudW1lcmUgcmVhbGUgb3Jkb25hdGUgZGVzY3Jlc2PEg3RvciDFn2kg8J2RpSB1biBudW3Eg3IgcmVhbC4gUGVudHJ1IGEgdmVyaWZpY2EgZGFjxIMgdmFsb2FyZWEg8J2RpSBzZSBnxINzZcWfdGUgc2F1IG51IMOubiB0YWJsb3VsIPCdkaMsIGFsZ29yaXRtdWwgZGUgY8SDdXRhcmUgYmluYXLEgyB2YSBlZmVjdHVhOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImV4YWN0IDEwMDAwMDAgZGUgY29tcGFyYcWjaWk7IiwKICAgICAgImNlbCBwdcWjaW4gMjQgZGUgY29tcGFyYcWjaWk7IiwKICAgICAgImNlbCBtdWx0IDI0IGRlIGNvbXBhcmHFo2lpOyIsCiAgICAgICJudSBzZSBwb2F0ZSBmb2xvc2kgYWxnb3JpdG11bCBkZSBjxIN1dGFyZSBiaW5hcsSDIMOubiBhY2VzdCBjYXouIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJDb25zaWRlcsSDbSB1cm3Eg3RvYXJlYSBmdW5jyJtpZSBzY3Jpc8SDIMOubiBsaW1iYWp1bCBDOlxuaW50IFMoaW50IGFbXSwgaW50IHAsIGludCB1KVxue1xuXHRpZihwPnUpIHJldHVybiAwOyBcblx0ZWxzZVxuXHR7XG5cdFx0aW50IG09KHArdSkvMjtcblx0XHRyZXR1cm4gYVttXSArIFMoYSxwLG0tMSkgKyBTKGEsbSsxLHUpO1xuXHR9XG59XG5cbsWedGlpbmQgY8SDIHRhYmxvdWwgYSBlc3RlIGZvcm1hdCBkaW4gbiBudW1lcmUgw65udHJlZ2ksIGlhciBhcGVsdWwgc3VicHJvZ3JhbXVsdWkgdmEgZmkg8J2RhijwnZGOLCAwLCDwnZGbIOKIkiAxKSwgcHJlY2l6YcibaSBjZSB2YSBjYWxjdWxhIGZ1bmPIm2lhIPCdkYY6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAidmFsb2FyZWEgZWxlbWVudHVsdWkgZGluIG1pamxvY3VsIHRhYmxvdWx1aSDwnZGOOyIsCiAgICAgICJkdWJsdWwgc3VtZWkgdmFsb3JpbG9yIGRpbiB0YWJsb3VsIPCdkY47IiwKICAgICAgIm51bcSDcnVsIHZhbG9yaWxvciBwb3ppdGl2ZSBkaW4gdGFibG91bCDwnZGOOyIsCiAgICAgICJzdW1hIHZhbG9yaWxvciBkaW4gdGFibG91bCDwnZGOLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRGFjxIMgdWx0aW1hIHNvbHXIm2llIGFmacWfYXTEgyBkZSBhbGdvcml0bXVsIGJhY2t0cmFja2luZyBwZW50cnUgZ2VuZXJhcmVhIHR1dHVyb3IgcGVybXV0xINyaWxvciBtdWzIm2ltaWkgezEsMiwg4oCmICw3fSBlc3RlIDcsNiwzLDUsNCwyLDEsIGF0dW5jaSB1cm3Eg3RvYXJlYSBzb2x1yJtpZSBjYXJlIHZhIGZpIGFmacWfYXTEgyBlc3RlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjcsNiw0LDEsMiw1LDMiLAogICAgICAiNywxLDIsMyw0LDUsNiIsCiAgICAgICI3LDYsNCwxLDIsMyw1IiwKICAgICAgIjcsNiw1LDMsNCwyLDEiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkRhY8SDIHVsdGltYSBzb2x1yJtpZSBhZmnFn2F0xIMgZGUgYWxnb3JpdG11bCBiYWNrdHJhY2tpbmcgcGVudHJ1IGdlbmVyYXJlYSB0dXR1cm9yIHBlcm11dMSDcmlsb3IgbXVsyJtpbWlpIHsxLDIs4oCmLDd9IGVzdGUgNiw1LDcsNCwzLDIsMSwgYXR1bmNpIHVybcSDdG9hcmVhIHNvbHXIm2llIGNhcmUgdmEgZmkgYWZpxZ9hdMSDIGVzdGU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiNywxLDIsMyw0LDUsNiIsCiAgICAgICI2LDcsMSwyLDMsNCw1IiwKICAgICAgIjcsNiwxLDIsMyw0LDUiLAogICAgICAiNiw3LDUsNCwzLDIsMSIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRGFjxIMgdWx0aW1hIHNvbHXIm2llIGFmacWfYXTEgyBkZSBhbGdvcml0bXVsIGJhY2t0cmFja2luZyBwZW50cnUgZ2VuZXJhcmVhIHR1dHVyb3IgcGVybXV0xINyaWxvciBtdWzIm2ltaWkgezEsMizigKYsN30gZXN0ZSA2LDcsNCw1LDMsMiwxLCBhdHVuY2kgdXJtxIN0b2FyZWEgc29sdcibaWUgY2FyZSB2YSBmaSBhZmnFn2F0xIMgZXN0ZToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICI3LDEsMiwzLDQsNSw2IiwKICAgICAgIjYsNSw3LDEsMiwzLDQiLAogICAgICAiNiw3LDUsMSwyLDMsNCIsCiAgICAgICI2LDEsMiwzLDQsNSw3IgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJGb2xvc2luZCB0ZWhuaWNhIGRlIHByb2dyYW1hcmUgYmFja3RyYWNraW5nIHBlbnRydSBhIGdlbmVyYSB0b2F0ZSBwZXJtdXTEg3JpbGUgbXVsyJtpbWlpIHsxLDIsIC4gLiAuICwg8J2Rm30sIG8gc29sdcibaWUgc2UgbWVtb3JlYXrEgyBzdWIgZm9ybWEgdW51aSB0YWJsb3UgdW5pZGltZW5zaW9uYWwg8J2RpeKCgSwg8J2RpeKCgiwgLiAuIC4gLCDwnZGl4oKZLiBEYWPEgyBhdSBmb3N0IGRlamEgZ2VuZXJhdGUgdmFsb3JpIHBlbnRydSBjb21wb25lbnRlbGUg8J2RpeKCgSwg8J2RpeKCgiwgLiAuIC4gLCDwnZGl4oKW4oKL4oKBLCBpYXIgcGVudHJ1IGNvbXBvbmVudGEg8J2RpeKCliAoMSA8IPCdkZggPCDwnZGbKSBhdSBmb3N0IGRlamEgdGVzdGF0ZSB0b2F0ZSB2YWxvcmlsZSBwb3NpYmlsZSDFn2kgbnUgYSBmb3N0IGfEg3NpdMSDIG5pY2l1bmEgY29udmVuYWJpbMSDLCBhdHVuY2k6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAic2Ugw65uY2VhcmPEgyBhbGVnZXJlYSB1bmVpIG5vaSB2YWxvcmkgcGVudHJ1IPCdkaXigpbigovigoE7IiwKICAgICAgInNlIMOubmNlYXJjxIMgYWxlZ2VyZWEgdW5laSBub2kgdmFsb3JpIHBlbnRydSDwnZGl4oKBLCBvcmljYXJlIGFyIGZpIHZhbG9hcmVhIGx1aSDwnZGYOyIsCiAgICAgICJzZSDDrm5jaGVpZSBhbGdvcml0bXVsOyIsCiAgICAgICJzZSDDrm5jZWFyY8SDIGFsZWdlcmVhIHVuZWkgdmFsb3JpIHBlbnRydSBjb21wb25lbnRhIPCdkaXigpbigorigoEuIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDAKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJDb25zaWRlcsSDbSBlY3VhyJtpYSDwnZGO4oKB8J2RpeKCgSArIPCdkY7igoLwnZGl4oKCICsg4ouvICsg8J2RjuKCmfCdkaXigpkgPSDwnZGmLCB1bmRlIPCdkY7igoEsIPCdkY7igoIsIOKApiAsIPCdkY7igpksIPCdkaYgc3VudCBudW1lcmUgbmF0dXJhbGUgbmVudWxlLiBQZW50cnUgYSBkZXRlcm1pbmEgdG9hdGUgc29sdcibaWlsZSBlY3VhyJtpZWkgZGUgZm9ybWEgKPCdkaXigoEsIPCdkaXigoIsIOKApiAsIPCdkaXigpkpLCBjdSDwnZGl4oKBLCDwnZGl4oKCLCDigKYgLCDwnZGl4oKZIG51bWVyZSBuYXR1cmFsZSwgc2UgcG9hdGUgZm9sb3NpIGRpcmVjdCBhbGdvcml0bXVsIGJhY2t0cmFja2luZyBwZW50cnU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiZ2VuZXJhcmVhIHBlcm11dMSDcmlsb3I7IiwKICAgICAgImRlc2NvbXB1bmVyZWEgdW51aSBudW3Eg3IgbmF0dXJhbCBjYSBzdW3EgyBkZSBudW1lcmUgbmF0dXJhbGUgbmVudWxlOyIsCiAgICAgICJwbGF0YSB1bmVpIHN1bWUgZm9sb3NpbmQg8J2RmyB0aXB1cmkgZGUgbW9uZWRlOyIsCiAgICAgICJnZW5lcmFyZWEgY29tYmluxINyaWxvci4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlVuIGFsZ29yaXRtIG9wdGltIGNhcmUgc8SDIGFmacWfZXplIHRvYXRlIHN1YsWfaXJ1cmlsZSBjcmVzY8SDdG9hcmUgZGUgbHVuZ2ltZSBtYXhpbcSDIGFsZSB1bnVpIMWfaXIgZm9ybWF0IGRpbiDwnZGbIG51bWVyZSBmb2xvc2XFn3RlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImRvYXIgbWV0b2RhIHByb2dyYW3Eg3JpaSBkaW5hbWljZTsiLAogICAgICAiZG9hciBtZXRvZGEgYmFja3RyYWNraW5nIChzZSBnZW5lcmVhesSDIHRvYXRlIHN1YsWfaXJ1cmlsZSDFn2lydWx1aSByZXNwZWN0aXYsIGlhciBwZW50cnUgZmllY2FyZSBzdWLFn2lyIHNlIHZlcmlmaWPEgyBkYWPEgyBlc3RlIGNyZXNjxIN0b3IgxZ9pLCByZXNwZWN0aXYsIG1heGltYWwpOyIsCiAgICAgICJtYWkgw65udMOiaSBtZXRvZGEgcHJvZ3JhbcSDcmlpIGRpbmFtaWNlIHBlbnRydSBhIGRldGVybWluYSBsdW5naW1lYSBtYXhpbcSDIPCdkZnwnZGa8J2RjvCdkaUgYSB1bnVpIHN1YsWfaXIgY3Jlc2PEg3RvciBhbCDFn2lydWx1aSBkYXQgxZ9pIGFwb2kgbWV0b2RhIGJhY2t0cmFja2luZyBwZW50cnUgYSBnZW5lcmEgdG9hdGUgc3VixZ9pcnVyaWxlIGNyZXNjxIN0b2FyZSBkZSBsdW5naW1lIPCdkZnwnZGa8J2RjvCdkaUgYWxlIMWfaXJ1bHVpIGNvbnNpZGVyYXQ7IiwKICAgICAgImRvYXIgbWV0b2RhIEdyZWVkeS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMgogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkNvbnNpZGVyxINtIGPEgyDDrm4gRmFjdWx0YXRlYSBkZSBJbmZvcm1hdGljxIMgc3VudCDDrm5zY3JpxZ9pIPCdkZsgc3R1ZGVuyJtpIMOubiBhbnVsIElJSS4gUGVudHJ1IGEgYWZpxZ9hIHRvYXRlIGdydXBlbGUgY2UgcG90IGZpIGZvcm1hdGUgZGluIGPDonRlIPCdkZ0gc3R1ZGVuyJtpICjwnZGdIOKJpCDwnZGbKSBwdXRlbSBmb2xvc2kgYWxnb3JpdG11bCBiYWNrdHJhY2tpbmcgcGVudHJ1OiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgImdlbmVyYXJlYSBhcmFuamFtZW50ZWxvciBmb3JtYXRlIGRpbiBwIGVsZW1lbnRlIGFsZSB1bmVpIG11bMibaW1pIGN1IG4gZWxlbWVudGU7IiwKICAgICAgImdlbmVyYXJlYSBwZXJtdXTEg3JpbG9yIHVuZWkgbXVsyJtpbWkgY3UgcCBlbGVtZW50ZTsiLAogICAgICAiZ2VuZXJhcmVhIGNvbWJpbsSDcmlsb3IgZm9ybWF0ZSBkaW4gcCBlbGVtZW50ZSBhbGUgdW5laSBtdWzIm2ltaSBjdSBuIGVsZW1lbnRlOyIsCiAgICAgICJnZW5lcmFyZWEgYXJhbmphbWVudGVsb3IgZm9ybWF0ZSBkaW4gbiBlbGVtZW50ZSBhbGUgdW5laSBtdWzIm2ltaSBjdSBwIGVsZW1lbnRlLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAyCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiVXRpbGl6w6JuZCBtZXRvZGEgYmFja3RyYWNraW5nLCBzZSBnZW5lcmVhesSDIHRvYXRlIGRlc2NvbXB1bmVyaWxlIGRpc3RpbmN0ZSBhbGUgbnVtxINydWx1aSBuYXR1cmFsIPCdkZsgPSAxMCBjYSBzdW3EgyBhIGNlbCBwdcibaW4gZG91xIMgbnVtZXJlIG5hdHVyYWxlIG5lbnVsZS4gQ2FyZSBlc3RlIHVsdGltYSBkZXNjb21wdW5lcmUgZ2VuZXJhdMSDPyIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjQgKyAzICsgMiArIDEiLAogICAgICAiOSArIDEiLAogICAgICAiNCArIDYiLAogICAgICAiNSArIDUiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIlV0aWxpesOibmQgbWV0b2RhIGJhY2t0cmFja2luZywgc2UgZ2VuZXJlYXrEgyB0b2F0ZSBkZXNjb21wdW5lcmlsZSBkaXN0aW5jdGUgYWxlIG51bcSDcnVsdWkgbmF0dXJhbCDwnZGbID0gMTYgY2Egc3VtxIMgYSBjZWwgcHXIm2luIGRvdcSDIG51bWVyZSBuYXR1cmFsZSBuZW51bGUuIENhcmUgZXN0ZSB1bHRpbWEgZGVzY29tcHVuZXJlIGdlbmVyYXTEgz8iLAogICAgImFuc3dlcnMiOiBbCiAgICAgICI0ICsgNCArIDQgKyA0IiwKICAgICAgIjE1ICsgMSIsCiAgICAgICI3ICsgOSIsCiAgICAgICI4ICsgOCIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiRmllIPCdkYYgbyBzdW3EgyBkZSBiYW5pIMWfaSDwnZGj4oKBLCDwnZGj4oKCLCDigKYgLCDwnZGj4oKZIHZhbG9yaWxlIGEgbiB0aXB1cmkgZGUgbW9uZWRlLiBQcmVzdXB1bsOibmQgY8SDIGRpbiBmaWVjYXJlIHRpcCBhdmVtIGxhIGRpc3BvemnFo2llIHVuIG51bcSDciBuZWxpbWl0YXQgZGUgbW9uZWRlLCBwZW50cnUgYWZpxZ9hcmVhIHR1dHVyb3IgbW9kYWxpdMSDxaNpbG9yIMOubiBjYXJlIHBvYXRlIGZpIHBsxIN0aXTEgyBzdW1hIPCdkYYgZm9sb3NpbmQgbW9uZWRlIGRpc3BvbmliaWxlIHRyZWJ1aWUgc8SDIHV0aWxpesSDbSB1biBhbGdvcml0bSBiYXphdCBwZSBtZXRvZGE6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAiR3JlZWR5OyIsCiAgICAgICJiYWNrdHJhY2tpbmc7IiwKICAgICAgInByb2dyYW3Eg3JpaSBkaW5hbWljZTsiLAogICAgICAiRGl2aWRlIGV0IEltcGVyYS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMQogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkNvbnNpZGVyxINtIHVuIHJ1Y3NhYyBjdSBhanV0b3J1bCBjxINydWlhIHB1dGVtIHRyYW5zcG9ydGEgNjYga2cgxZ9pIDcgb2JpZWN0ZSBhdsOibmQgZ3JldXTEg8ibaWxlIDIzLCAxMCwgMTAsIDI1LCAzOCwgNyDFn2kgNSBrZywgaWFyIGPDosWfdGlndXJpbGUgb2LIm2ludXRlIHByaW4gdHJhbnNwb3J0dWwgaW50ZWdyYWwgYWwgZmllY8SDcnVpIG9iaWVjdCBsYSBkZXN0aW5hyJtpZSBzdW50IDY5LCAxMCwgMzAsIDEwMCwgMTksIDE0IMWfaSA1MCBST04uIMWedGlpbmQgY8SDIGRpbiBvcmljZSBvYmllY3QgcHV0ZW0gw65uY8SDcmNhIMWfaSBudW1haSBvIHBhcnRlIGEgc2EsIGPDosWfdGlndWwgbWF4aW0gcGUgY2FyZSDDrmwgcHV0ZW0gb2LIm2luZSBlc3RlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjI1MC41IFJPTiIsCiAgICAgICIyMTcgUk9OIiwKICAgICAgIjI2NSBST04iLAogICAgICAiMjU1IFJPTiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQ29uc2lkZXLEg20gdW4gcnVjc2FjIGN1IGFqdXRvcnVsIGPEg3J1aWEgcHV0ZW0gdHJhbnNwb3J0YSA2NyBrZyDFn2kgNyBvYmllY3RlIGF2w6JuZCBncmV1dMSDyJtpbGUgMTAsIDUsIDIwLCAxMCwgMjAsIDI1IMWfaSAyMSBrZywgaWFyIGPDosWfdGlndXJpbGUgb2LIm2ludXRlIHByaW4gdHJhbnNwb3J0dWwgaW50ZWdyYWwgYWwgZmllY8SDcnVpIG9iaWVjdCBsYSBkZXN0aW5hyJtpZSBzdW50IDMwLCA0MCwgNDAsIDEwLCA0LCA1MCDFn2kgMzAgUk9OLiDFnnRpaW5kIGPEgyBkaW4gb3JpY2FyZSBvYmllY3QgcHV0ZW0gw65uY8SDcmNhIMWfaSBudW1haSBvIHBhcnRlIGEgc2EsIGPDosWfdGlndWwgbWF4aW0gcGUgY2FyZSDDrmwgcHV0ZW0gb2LIm2luZSBlc3RlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjExNCBST04iLAogICAgICAiMTcwIFJPTiIsCiAgICAgICIyODAgUk9OIiwKICAgICAgIjE2My43IFJPTiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAxCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiQ29uc2lkZXLEg20gdW4gcnVjc2FjIGN1IGFqdXRvcnVsIGPEg3J1aWEgcHV0ZW0gdHJhbnNwb3J0YSA1MyBrZyDFn2kgNyBvYmllY3RlIGF2w6JuZCBncmV1dMSDyJtpbGUgMTAsIDUsIDE4LCAxMCwgOCwgMjAgxZ9pIDQwIGtnLCBpYXIgY8OixZ90aWd1cmlsZSBvYsibaW51dGUgcHJpbiB0cmFuc3BvcnR1bCBpbnRlZ3JhbCBhbCBmaWVjxINydWkgb2JpZWN0IGxhIGRlc3RpbmHIm2llIHN1bnQgMzAsIDQwLCAzNiwgMTAsIDE2LCAxMCDFn2kgMzAgUk9OLiDFnnRpaW5kIGPEgyBkaW4gb3JpY2FyZSBvYmllY3QgcHV0ZW0gw65uY8SDcmNhIMWfaSBudW1haSBvIHBhcnRlIGEgc2EsIGPDosWfdGlndWwgbWF4aW0gcGUgY2FyZSDDrmwgcHV0ZW0gb2LIm2luZSBlc3RlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIjEzMyBST04iLAogICAgICAiMTIxIFJPTiIsCiAgICAgICIxMzMuNSBST04iLAogICAgICAiMTM2LjUgUk9OIgogICAgXSwKICAgICJjb3JyZWN0X2Fuc3dlciI6IDIKICB9LAogIHsKICAgICJxdWVzdGlvbiI6ICJTdGFiaWxpyJtpIGNhcmUgZGludHJlIHVybcSDdG9hcmVsZSBwcm9wb3ppyJtpaSByZWZlcml0b2FyZSBsYSB0ZWhuaWNhIGRlIHByb2dyYW1hcmUgR3JlZWR5IHN1bnQgYWRldsSDcmF0ZToiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJjb25kdWNlIMOubnRvdGRlYXVuYSBsYSBvIHNvbHXIm2llIG9wdGltxIM7IiwKICAgICAgImNvbnN0cnVpZcWfdGUgbyBzb2x1yJtpZSBlbGVtZW50IGN1IGVsZW1lbnQgxZ9pIMOubiBjYXp1bCDDrm4gY2FyZSB2YWxvYXJlYSBlbGVtZW50dWx1aSBjdXJlbnQgbnUgdmVyaWZpY8SDIGFudW1pdGUgY29uZGnIm2lpIHNlIHJlbnVuyJvEgyBsYSBhY2VzdGEgxZ9pIHNlIHJldmluZSBsYSBlbGVtZW50dWwgYW50ZXJpb3I7IiwKICAgICAgImfEg3NlxZ90ZSB0b2F0ZSBzb2x1yJtpbGUgdW5laSBwcm9ibGVtZTsiLAogICAgICAiY29uZHVjZSBsYSBvIHNvbHXIm2llIG9wdGltxIMgZG9hciDDrm4gY2F6dWwgw65uIGNhcmUgcy1hIGRlbW9uc3RyYXQgbWF0ZW1hdGljIGNvcmVjdGl0dWRpbmVhIGNyaXRlcml1bHVpIGRlIHNlbGVjyJtpZSBwZSBiYXphIGPEg3J1aWEgdW4gZWxlbWVudCBkaW4gbXVsyJtpbWVhIGluacibaWFsxIMgZXN0ZSBhZMSDdWdhdCDDrm4gc29sdcibaWEgcHJvYmxlbWVpLiIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAzCiAgfSwKICB7CiAgICAicXVlc3Rpb24iOiAiTGEgdW4gZ2hpxZ9ldSBzdGF1IGxhIGNvYWTEgyDwnZGbIHBlcnNvYW5lLCBudW1lcm90YXRlIGN1IDEsMiwgLiAuIC4gLCDwnZGbLiBDdW5vc2PDom5kIHRpbXBpaSBkZSBzZXJ2aXJlIPCdkaHigoEs8J2RoeKCgiwg4oCmICzwnZGh4oKZIGFpIGNlbG9yIPCdkZsgcGVyc29hbmUgxZ9pIMWfdGlpbmQgY8SDIHBlbnRydSBhIHNlcnZpIG8gcGVyc29hbsSDIPCdkZggdHJlYnVpZSBzZXJ2aXRlIHBlcnNvYW5lbGUgMSwyLCAuIC4gLiAsIPCdkZgg4oiSIDEgYWZsYXRlIMOubmFpbnRlYSBzYSwgdHJlYnVpZSBzxIMgZGV0ZXJtaW7Eg20gdW4gbW9kIGRlIHJlYXJhbmphcmUgYWwgcGVyc29hbmVsb3IgbGEgY29hZMSDLCBhc3RmZWwgw65uY8OidCB0aW1wdWwgZGUgYcWfdGVwdGFyZSBhbCBmaWVjxINyZWkgcGVyc29hbmUgc8SDIGZpZSBtaW5pbS4gU3RhYmlsacibaSBjYXJlIGRpbnRyZSB1cm3Eg3RvYXJlbGUgdmFyaWFudGUgZGUgcmV6b2x2YXJlIGEgYWNlc3RlaSBwcm9ibGVtZSBlc3RlIGNvcmVjdMSDIMWfaSBhcmUgbyBjb21wbGV4aXRhdGUgbWluaW3EgzoiLAogICAgImFuc3dlcnMiOiBbCiAgICAgICJzZSBnZW5lcmVhesSDIHRvYXRlIG1vZHVyaWxlIMOubiBjYXJlIHBvdCBmaSByZWFyYW5qYXRlIGNlbGUg8J2RmyBwZXJzb2FuZSBsYSBjb2FkxIMgxZ9pIHBlbnRydSBmaWVjYXJlIG1vZCBkZSByZWFyYW5qYXJlIHNlIGNhbGN1bGVhesSDIMOubnRyLXVuIHRhYmxvdSB0aW1waWkgZGUgc2VydmlyZSwgaWFyIHNvbHXIm2lhIGVzdGUgZGF0xIMgZGUgdGFibG91bCBtaW5pbSDDrm4gc2VucyBsZXhpY29ncmFmaWM7IiwKICAgICAgInNlIHJlYXJhbmplYXrEgyBwZXJzb2FuZWxlIMOubiBvcmRpbmVhIGRlc2NyZXNjxIN0b2FyZSBhIHRpbXBpbG9yIGRlIHNlcnZpcmU7IiwKICAgICAgInNlIGdlbmVyZWF6xIMgdG9hdGUgbW9kdXJpbGUgw65uIGNhcmUgcG90IGZpIHJlYXJhbmphdGUgY2VsZSDwnZGbIHBlcnNvYW5lIGxhIGNvYWTEgyDFn2kgcGVudHJ1IGZpZWNhcmUgbW9kIGRlIHJlYXJhbmphcmUgc2UgY2FsY3VsZWF6xIMgdGltcHVsIHRvdGFsIPCdkYcgZGUgc2VydmlyZSBhbCBjZWxvciDwnZGbIHBlcnNvYW5lLCBpYXIgc29sdcibaWEgZXN0ZSB0YWJsb3VsIHBlbnRydSBjYXJlIHZhbG9hcmVhIGx1aSDwnZGHIGVzdGUgbWluaW3EgzsiLAogICAgICAic2UgcmVhcmFuamVhesSDIHBlcnNvYW5lbGUgw65uIG9yZGluZWEgY3Jlc2PEg3RvYXJlIGEgdGltcGlsb3IgZGUgc2VydmlyZS4iCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMwogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkxhIHVuIGdoacWfZXUgc3RhdSBsYSBjb2FkxIMgNyBwZXJzb2FuZSDwnZGd4oKBLCDwnZGd4oKCLCDigKYgLCDwnZGd4oKHLiBDdW5vc2PDom5kIHRpbXBpaSBsb3IgZGUgc2VydmlyZSDwnZGh4oKBID0gMTAsIPCdkaHigoIgPSA2LCDwnZGh4oKDID0gNSwg8J2RoeKChCA9IDcsIPCdkaHigoUgPSAyLCDwnZGh4oKGID0gOCwg8J2RoeKChyA9IDQgxZ9pIMWfdGlpbmQgY8SDIHBlbnRydSBhIHNlcnZpIG8gcGVyc29hbsSDIHRyZWJ1aWUgc2Vydml0ZSwgbWFpIMOubnTDomksIHRvYXRlIHBlcnNvYW5lbGUgYWZsYXRlIMOubmFpbnRlYSBzYSwgcHJlY2l6YcibaSBjYXJlIGRpbnRyZSB1cm3Eg3RvYXJlbGUgbW9kYWxpdMSDyJtpIGRlIHJlYXJhbmphcmUgYSBwZXJzb2FuZWxvciBsYSBjb2FkxIMgbWluaW1pemVhesSDIHRpbXB1bCBtZWRpdSBkZSBhyJl0ZXB0YXJlOiIsCiAgICAiYW5zd2VycyI6IFsKICAgICAgIvCdkZ3igoUsIPCdkZ3igocsIPCdkZ3igoMsIPCdkZ3igoIsIPCdkZ3igoQsIPCdkZ3igoYsIPCdkZ3igoEiLAogICAgICAi8J2RneKCgSwg8J2RneKChiwg8J2RneKChCwg8J2RneKCgiwg8J2RneKCgywg8J2RneKChSwg8J2RneKChyIsCiAgICAgICLwnZGd4oKFLCDwnZGd4oKHLCDwnZGd4oKDLCDwnZGd4oKELCDwnZGd4oKCLCDwnZGd4oKGLCDwnZGd4oKBIiwKICAgICAgIvCdkZ3igoMsIPCdkZ3igocsIPCdkZ3igoIsIPCdkZ3igoEsIPCdkZ3igoYsIPCdkZ3igoQsIPCdkZ3igoUiCiAgICBdLAogICAgImNvcnJlY3RfYW5zd2VyIjogMAogIH0sCiAgewogICAgInF1ZXN0aW9uIjogIkxhIHVuIGdoacWfZXUgc3RhdSBsYSBjb2FkxIMgNyBwZXJzb2FuZSDwnZGd4oKBLCDwnZGd4oKCLCDigKYgLCDwnZGd4oKHLiBDdW5vc2PDom5kIHRpbXBpaSBsb3IgZGUgc2VydmlyZSDwnZGh4oKBID0gMTIsIPCdkaHigoIgPSA2LCDwnZGh4oKDID0gMTUsIPCdkaHigoQgPSAxNSwg8J2RoeKChSA9IDEyLCDwnZGh4oKGID0gOCzwnZGh4oKHID0gMiDFn2kgxZ90aWluZCBjxIMgcGVudHJ1IGEgc2VydmkgbyBwZXJzb2FuxIMgdHJlYnVpZSBzZXJ2aXRlLCBtYWkgw65udMOiaSwgdG9hdGUgcGVyc29hbmVsZSBhZmxhdGUgw65uYWludGVhIHNhLCBwcmVjaXphyJtpIGNhcmUgZGludHJlIHVybcSDdG9hcmVsZSBtb2RhbGl0xIPIm2kgZGUgcmVhcmFuamFyZSBhIHBlcnNvYW5lbG9yIGxhIGNvYWTEgyBudSBtaW5pbWl6ZWF6xIMgdGltcHVsIG1lZGl1IGRlIGHImXRlcHRhcmU6IiwKICAgICJhbnN3ZXJzIjogWwogICAgICAi8J2RneKChywg8J2RneKCgiwg8J2RneKChiwg8J2RneKChSwg8J2RneKCgSwg8J2RneKCgywg8J2RneKChCIsCiAgICAgICLwnZGd4oKHLCDwnZGd4oKCLCDwnZGd4oKGLCDwnZGd4oKFLCDwnZGd4oKBLCDwnZGd4oKELCDwnZGd4oKDIiwKICAgICAgIvCdkZ3igocsIPCdkZ3igoYsIPCdkZ3igoIsIPCdkZ3igoUsIPCdkZ3igoEsIPCdkZ3igoQsIPCdkZ3igoMiLAogICAgICAi8J2RneKChywg8J2RneKCgiwg8J2RneKChiwg8J2RneKCgSwg8J2RneKChSwg8J2RneKChCwg8J2RneKCgyIKICAgIF0sCiAgICAiY29ycmVjdF9hbnN3ZXIiOiAyCiAgfQpd,
}

enum Web {
  ,
}

extension FFEnumExtensions<T extends Enum> on T {
  String serialize() => name;
}

extension FFEnumListExtensions<T extends Enum> on Iterable<T> {
  T? deserialize(String? value) =>
      firstWhereOrNull((e) => e.serialize() == value);
}

T? deserializeEnum<T>(String? value) {
  switch (T) {
    case (Asd):
      return Asd.values.deserialize(value) as T?;
    case (BazaDate):
      return BazaDate.values.deserialize(value) as T?;
    case (Cloud):
      return Cloud.values.deserialize(value) as T?;
    case (Comert):
      return Comert.values.deserialize(value) as T?;
    case (Cryptografie):
      return Cryptografie.values.deserialize(value) as T?;
    case (Fp):
      return Fp.values.deserialize(value) as T?;
    case (Inovare):
      return Inovare.values.deserialize(value) as T?;
    case (Java):
      return Java.values.deserialize(value) as T?;
    case (Python):
      return Python.values.deserialize(value) as T?;
    case (Poo):
      return Poo.values.deserialize(value) as T?;
    case (Retele):
      return Retele.values.deserialize(value) as T?;
    case (Sgbd):
      return Sgbd.values.deserialize(value) as T?;
    case (So):
      return So.values.deserialize(value) as T?;
    case (Tap):
      return Tap.values.deserialize(value) as T?;
    case (Web):
      return Web.values.deserialize(value) as T?;
    default:
      return null;
  }
}
